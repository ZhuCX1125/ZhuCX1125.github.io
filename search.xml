<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django+SimpleUI快速入门</title>
    <url>/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h1><h2 id="1、安装simpleui"><a href="#1、安装simpleui" class="headerlink" title="1、安装simpleui"></a>1、安装simpleui</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django-simpleui </span><br></pre></td></tr></table></figure>

<h2 id="2、修改django后台模块默认的模板"><a href="#2、修改django后台模块默认的模板" class="headerlink" title="2、修改django后台模块默认的模板"></a>2、修改django后台模块默认的模板</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改project的setting文件，在INSTALLED_APPS 首行引入simple应用</span></span><br><span class="line">  INSTALLED_APPS = [</span><br><span class="line">      <span class="string">&#x27;simpleui&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">      ...</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<h2 id="3、字符集及时区设置"><a href="#3、字符集及时区设置" class="headerlink" title="3、字符集及时区设置"></a>3、字符集及时区设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改project的setting文件</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">USE_TZ = <span class="literal">False</span> <span class="comment"># 这里务必调整为False，否则时区设置无效</span></span><br></pre></td></tr></table></figure>

<h2 id="4、静态资源及debug状态设置"><a href="#4、静态资源及debug状态设置" class="headerlink" title="4、静态资源及debug状态设置"></a>4、静态资源及debug状态设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django在开发环境提供bug调试功能，同时该设置影响到runserver运行时的静态资源引入，故生产环境关闭debug开关的时候，保障静态资源的正确引入需要显性定义静态资源</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 定义静态资源位置</span></span><br><span class="line"> STATICFILES_DIRS = [</span><br><span class="line">     os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),</span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># or 通过克隆方式将静态资源克隆到项目的静态资源目录，交由ngnix调用</span></span><br><span class="line">python3 manage.py collectstatic</span><br><span class="line"><span class="comment"># 如果克隆报错提示找不到静态目录，请先在settings.py指定静态目录</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于开发过程中simpleui有限通过cdn进行页面渲染，一般情况下我们需要将其调整成本地资源方式，往往生产环境是无法连接外网的</span></span><br><span class="line">SIMPLEUI_STATIC_OFFLINE = <span class="literal">True</span> <span class="comment"># 离线模式</span></span><br></pre></td></tr></table></figure>

<h2 id="5、数据库连接配置"><a href="#5、数据库连接配置" class="headerlink" title="5、数据库连接配置"></a>5、数据库连接配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里以postgresql数据库为例，通常建议使用mysql数据库，多数据库连接不在此处讨论</span></span><br><span class="line"><span class="comment"># postgresql</span></span><br><span class="line"><span class="comment">## 安装postgresql驱动</span></span><br><span class="line">pip install psycopg2-binary</span><br><span class="line"><span class="comment">#pip install psycopg2</span></span><br><span class="line"><span class="comment">## 这里需要设置postgresql的schema信息，通过options字典指定配置</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.postgresql_psycopg2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span> : <span class="string">&#x27;moon&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;5432&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;options&#x27;</span>: <span class="string">&#x27;-c search_path=myapp&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="comment">## 安装mysql驱动</span></span><br><span class="line">pip install pymysql</span><br><span class="line"><span class="comment">## init文件引入pymysql 用于代理django认可的mysql驱动，同时由于django的版本问题对pymysql的版本存在要求需要增加一个版本欺骗动作</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.version_info = (<span class="number">1</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="string">&quot;final&quot;</span>, <span class="number">0</span>)</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"><span class="comment">## setting增加mysql连接串配置信息</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>:<span class="string">&#x27;jay_django_test&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;qweasd&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、admin模块进行数据库初始化"><a href="#6、admin模块进行数据库初始化" class="headerlink" title="6、admin模块进行数据库初始化"></a>6、admin模块进行数据库初始化</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行数据库迁移</span></span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<h2 id="7、创建admin模块超级管理员角色"><a href="#7、创建admin模块超级管理员角色" class="headerlink" title="7、创建admin模块超级管理员角色"></a>7、创建admin模块超级管理员角色</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<h2 id="8、检查simple是否正确引入"><a href="#8、检查simple是否正确引入" class="headerlink" title="8、检查simple是否正确引入"></a>8、检查simple是否正确引入</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浏览器访问 127.0.0.1:8000/admin 使用admin账户登录确认是否生效</span></span><br></pre></td></tr></table></figure>

<h1 id="二、创建APP"><a href="#二、创建APP" class="headerlink" title="二、创建APP"></a>二、创建APP</h1><h2 id="1、创建app"><a href="#1、创建app" class="headerlink" title="1、创建app"></a>1、创建app</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp myapp</span><br><span class="line"><span class="comment"># 将app注册到project</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;simpleui&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;myapp&#x27;</span>, <span class="comment"># 添加到末尾</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 说明：这里注册app是整个app的起点，包括后续涉及到数据迁移文件的生成都依赖于注册列表</span></span><br></pre></td></tr></table></figure>

<h2 id="2、创建model"><a href="#2、创建model" class="headerlink" title="2、创建model"></a>2、创建model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在app的model创建测试用例的model</span></span><br><span class="line"><span class="keyword">import</span> django.utils.timezone <span class="keyword">as</span> timezone</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">job_detail</span>(models.Model):</span><br><span class="line">    <span class="comment">## 定义枚举值状态</span></span><br><span class="line">    JOB_TYPE_STATUS_GP = <span class="string">&#x27;01&#x27;</span></span><br><span class="line">    JOB_TYPE_STATUS_DEFAULT = <span class="string">&#x27;02&#x27;</span></span><br><span class="line">    JOB_TYPE_STATUS_CHOICES = (</span><br><span class="line">        (JOB_TYPE_STATUS_GP, <span class="string">&#x27;Greenplum函数&#x27;</span>),</span><br><span class="line">        (JOB_TYPE_STATUS_DEFAULT, <span class="string">&#x27;其他&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    CREATED_BY = models.CharField(<span class="string">&#x27;创建人&#x27;</span>,max_length=<span class="number">32</span>) <span class="comment"># 创建人</span></span><br><span class="line">    CREATED_TIME = models.DateTimeField(<span class="string">&#x27;创建时间&#x27;</span>,default=timezone.now) <span class="comment"># 创建时间</span></span><br><span class="line">    UPDATED_BY = models.CharField(<span class="string">&#x27;更新人&#x27;</span>,max_length=<span class="number">32</span>) <span class="comment"># 更新人</span></span><br><span class="line">    UPDATED_TIME = models.DateTimeField(<span class="string">&#x27;更新时间&#x27;</span>,default=timezone.now)  <span class="comment"># 更新时间</span></span><br><span class="line">    JOB_TYPE = models.CharField(<span class="string">&#x27;任务类型&#x27;</span>,max_length=<span class="number">32</span>,</span><br><span class="line">                                choices=JOB_TYPE_STATUS_CHOICES,</span><br><span class="line">                                default=JOB_TYPE_STATUS_DEFAULT</span><br><span class="line">                                ) <span class="comment"># 任务类型 01：gp任务；02：datax任务；03：kafka推送任务；04：http请求任务</span></span><br><span class="line">    JOB_NAME = models.CharField(<span class="string">&#x27;任务名称&#x27;</span>,max_length=<span class="number">128</span>) <span class="comment"># 任务名称</span></span><br><span class="line">    JOB_COMMENT = models.CharField(<span class="string">&#x27;任务描述&#x27;</span>,max_length=<span class="number">128</span>)  <span class="comment"># 任务描述</span></span><br><span class="line">    IN_PARA = models.CharField(<span class="string">&#x27;输入参数定义&#x27;</span>,max_length=<span class="number">32</span>) <span class="comment"># 输入参数定义 参数使用英文逗号分隔</span></span><br><span class="line">    IN_PARA_COMMENT = models.CharField(<span class="string">&#x27;输入参数描述&#x27;</span>,max_length=<span class="number">1024</span>)  <span class="comment"># 输入参数描述</span></span><br><span class="line">    OUT_PARA = models.CharField(<span class="string">&#x27;输出参数定义&#x27;</span>,max_length=<span class="number">32</span>)  <span class="comment"># 输出参数定义 参数使用英文逗号分隔</span></span><br><span class="line">    OUT_PARA_COMMENT = models.CharField(<span class="string">&#x27;输出参数描述&#x27;</span>,max_length=<span class="number">1024</span>)  <span class="comment"># 输出参数描述</span></span><br><span class="line">    VERSION = models.CharField(<span class="string">&#x27;版本号&#x27;</span>,max_length=<span class="number">32</span>) <span class="comment"># 版本号</span></span><br><span class="line">    IS_DELETE = models.CharField(<span class="string">&#x27;是否删除&#x27;</span>,max_length=<span class="number">1</span>, default=<span class="string">&#x27;N&#x27;</span>)  <span class="comment"># 逻辑删除 Y:删除；N:正常</span></span><br><span class="line">    PRO_STATUS = models.CharField(<span class="string">&#x27;发布状态&#x27;</span>,max_length=<span class="number">1</span>,default=<span class="string">&#x27;N&#x27;</span>) <span class="comment"># 发布状态 Y:发布；N:开发</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据库迁移文件，生产环境建议指定app进行迁移文件生成，避免未完善功能对已有正常版本的影响</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line"><span class="comment"># 执行数据库迁移</span></span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<h2 id="3、配置路由"><a href="#3、配置路由" class="headerlink" title="3、配置路由"></a>3、配置路由</h2><p>在应用的admin.py中进行model对象注册</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常规的django的web开发一般需要在各个app中创建urls文件，并且将urls路由引入到project的urls中进行统一管理，这里我们通过admin模块的路由注册功能，注册到admin的路由中</span></span><br><span class="line"><span class="comment"># 应用的admin.py中进行model对象注册</span></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> job_detail</span><br><span class="line">admin.site.register(job_detail)</span><br></pre></td></tr></table></figure>

<h1 id="三、页面布局"><a href="#三、页面布局" class="headerlink" title="三、页面布局"></a>三、页面布局</h1><h2 id="1、增删改查model测试"><a href="#1、增删改查model测试" class="headerlink" title="1、增删改查model测试"></a>1、增删改查model测试</h2><p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-2ed2bdcc1a69899a80e69db5bfb4e0d1_720w.webp" alt="img"></p>
<blockquote>
<h1 id="此时登录到页面上可以发现，刚刚创建的数据表已经作为一个类目在页面上展示了，但同时会发现一个问题，详情页面里面显示的并不是字段信息，而是具体的表名称，此处与我们设想的内容并不匹配。通过这一步骤我们成功验证了app的注册方式。具体展示内容，下面的步骤会详细介绍"><a href="#此时登录到页面上可以发现，刚刚创建的数据表已经作为一个类目在页面上展示了，但同时会发现一个问题，详情页面里面显示的并不是字段信息，而是具体的表名称，此处与我们设想的内容并不匹配。通过这一步骤我们成功验证了app的注册方式。具体展示内容，下面的步骤会详细介绍" class="headerlink" title="此时登录到页面上可以发现，刚刚创建的数据表已经作为一个类目在页面上展示了，但同时会发现一个问题，详情页面里面显示的并不是字段信息，而是具体的表名称，此处与我们设想的内容并不匹配。通过这一步骤我们成功验证了app的注册方式。具体展示内容，下面的步骤会详细介绍"></a>此时登录到页面上可以发现，刚刚创建的数据表已经作为一个类目在页面上展示了，但同时会发现一个问题，详情页面里面显示的并不是字段信息，而是具体的表名称，此处与我们设想的内容并不匹配。通过这一步骤我们成功验证了app的注册方式。具体展示内容，下面的步骤会详细介绍</h1></blockquote>
<h2 id="2、admin首页布局"><a href="#2、admin首页布局" class="headerlink" title="2、admin首页布局"></a>2、admin首页布局</h2><p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-c74ab5ebadb0287d9a6a7bce34f167c0_720w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如上图所示，首页基础展示项目由三个部分组成，往往我们需要对首页进行定制重写，这里我们先把这几个展示模块先关闭</span></span><br><span class="line"><span class="comment"># project的setting文件最后追加如下设置，即可关闭以上几个模块以及信息采集模块</span></span><br><span class="line">SIMPLEUI_HOME_INFO = <span class="literal">False</span></span><br><span class="line">SIMPLEUI_HOME_QUICK = <span class="literal">False</span></span><br><span class="line">SIMPLEUI_HOME_ACTION = <span class="literal">False</span></span><br><span class="line">SIMPLEUI_ANALYSIS = <span class="literal">False</span></span><br><span class="line"><span class="comment"># SIMPLEUI_HOME_TITLE = &#x27;百度一下你就知道&#x27; # 【首页】按钮文案配置</span></span><br><span class="line">SIMPLEUI_HOME_PAGE = <span class="string">&#x27;https://www.baidu.com&#x27;</span> <span class="comment"># 可用于嵌入其他链接，这里可以直接方便的嵌入报表链接</span></span><br><span class="line">SIMPLEUI_HOME_ICON = <span class="string">&#x27;el el-icon-platform-eleme&#x27;</span></span><br><span class="line"><span class="comment"># ICON 支持element-ui和fontawesome  eg：fa fa-user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图标ICON 样式查看</span></span><br><span class="line">https://element.eleme.cn/<span class="comment">#/zh-CN/component/icon</span></span><br><span class="line">http://www.fontawesome.com.cn/cheatsheet/</span><br><span class="line"><span class="comment"># 经过实际测试，饿了么的图标稍微有点小，而且数量少</span></span><br></pre></td></tr></table></figure>

<p>接下来我们一起看下侧边栏设置，simpleui的侧边栏支持菜单排序，动态菜单等功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># project的setting文件中增加如下配置，icon信息可以参考http://www.fontawesome.com.cn/cheatsheet/</span></span><br><span class="line">SIMPLEUI_CONFIG = &#123;</span><br><span class="line">    <span class="string">&#x27;system_keep&#x27;</span>: <span class="literal">False</span>, <span class="comment"># 关闭系统菜单</span></span><br><span class="line">    <span class="string">&#x27;menu_display&#x27;</span>: [<span class="string">&#x27;任务管理&#x27;</span>, <span class="string">&#x27;测试&#x27;</span>, <span class="string">&#x27;权限认证&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;dynamic&#x27;</span>: <span class="literal">True</span>,    <span class="comment"># 设置是否开启动态菜单, 默认为False. 如果开启, 则会在每次用户登陆时动态展示菜单内容</span></span><br><span class="line">    <span class="string">&#x27;menus&#x27;</span>: [&#123;</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>: <span class="string">&#x27;myapp&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;任务管理&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;fas fa-user-shield&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;models&#x27;</span>: [&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;任务管理1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;fa fa-user&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;job_detail/&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>: <span class="string">&#x27;auth&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;权限认证&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;fas fa-user-shield&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;models&#x27;</span>: [&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;用户&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;fa fa-user&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;auth/user/&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;测试&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;fa fa-file&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;models&#x27;</span>: [&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Baidu&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://baidu.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;far fa-surprise&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;内网穿透&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.wezoz.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;fab fa-github&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-72bd33df0b18f1e2e346c41ecdd8f4fd_720w.webp" alt="img"></p>
<p>如图所示，新配置的侧边栏已经生效，但点击我们自己创建的app的详情页面提示404错误，从异常信息得知，我们在路由配置上存在问题，系统未能找到我们的路由信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 问题配置</span><br><span class="line">&#x27;url&#x27;: &#x27;job_detail/&#x27;</span><br><span class="line"># 正确配置</span><br><span class="line">&#x27;url&#x27;: &#x27;myapp/job_detail/&#x27;</span><br><span class="line"># 这里大家可以思考下，url的配置与常规的urls.py文件的路由显性引入的异同点</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-3c9a33a41d09044d7e504a9efa153e02_720w.webp" alt="img"></p>
<h2 id="3、页面标题及侧边栏标题定制"><a href="#3、页面标题及侧边栏标题定制" class="headerlink" title="3、页面标题及侧边栏标题定制"></a>3、页面标题及侧边栏标题定制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用的admin.py文件中</span></span><br><span class="line">admin.site.site_header = <span class="string">&#x27;数据中心&#x27;</span></span><br><span class="line">admin.site.site_title = <span class="string">&#x27;XXX数据中心&#x27;</span></span><br><span class="line">admin.site.index_title = <span class="string">u&#x27;XXXX数据中心&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-da9fb25e0b0c6b800146cd4a264474f6_720w.webp" alt="img"></p>
<p><em>目前看index_title在simpleui中无效，检查过simpleui的template文件确实没使用到这个参数</em></p>
<h2 id="4、列表查询页面定制"><a href="#4、列表查询页面定制" class="headerlink" title="4、列表查询页面定制"></a>4、列表查询页面定制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># admin文件中定义展示页面，后续方便页面管理，可以独立文件，通过import方式引入进行注册</span></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> job_detail</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">job_detail</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">job_detail</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="comment"># 设置页面可以展示的字段</span></span><br><span class="line">    list_display = (<span class="string">&#x27;JOB_TYPE&#x27;</span>, <span class="string">&#x27;JOB_NAME&#x27;</span>,<span class="string">&#x27;JOB_COMMENT&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;IN_PARA&#x27;</span>,<span class="string">&#x27;IN_PARA_COMMENT&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;OUT_PARA&#x27;</span>,<span class="string">&#x27;OUT_PARA_COMMENT&#x27;</span>)</span><br><span class="line">    <span class="comment"># 默认不配置的话，第一个字段会存在链接到记录编辑页面</span></span><br><span class="line">    <span class="comment"># list_display_links = None</span></span><br><span class="line">    list_display_links = (<span class="string">&#x27;JOB_NAME&#x27;</span>,)</span><br><span class="line">    <span class="comment"># 设置过滤选项</span></span><br><span class="line">    list_filter = (<span class="string">&#x27;JOB_TYPE&#x27;</span>, <span class="string">&#x27;CREATED_TIME&#x27;</span>,)</span><br><span class="line">    <span class="comment"># 每页显示条目数 缺省值100</span></span><br><span class="line">    list_per_page = <span class="number">1</span></span><br><span class="line">    <span class="comment"># show all页面上的model数目，缺省200</span></span><br><span class="line">    <span class="comment"># list_max_show_all = 200</span></span><br><span class="line">    <span class="comment"># 设置可编辑字段 如果设置了可以编辑字段，页面会自动增加保存按钮</span></span><br><span class="line">    list_editable = (<span class="string">&#x27;IN_PARA_COMMENT&#x27;</span>,)</span><br><span class="line">    <span class="comment"># 按日期月份筛选 该属性一般不用</span></span><br><span class="line">    <span class="comment"># date_hierarchy = &#x27;CREATED_TIME&#x27;</span></span><br><span class="line">    <span class="comment"># 按发布日期降序排序</span></span><br><span class="line">    ordering = (<span class="string">&#x27;-CREATED_TIME&#x27;</span>,)</span><br><span class="line">    <span class="comment"># 搜索条件设置</span></span><br><span class="line">    search_fields = (<span class="string">&#x27;JOB_NAME&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表头字段显示中文名称，这里需要修改models文件，在定义字段的时候增加别名</span></span><br><span class="line">    <span class="comment"># eg1：JOB_NAME = models.CharField(&#x27;任务名称&#x27;,max_length=128)</span></span><br><span class="line">    <span class="comment"># eg2: name = models.CharField(max_length=30,verbose_name=u&quot;姓名&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字段关联展示</span></span><br><span class="line">    <span class="comment">## 场景1、关联其他表的数据展示，此处外键展示不做演示，生产环境尽量减少外键使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 场景2、枚举信息转义展示</span></span><br><span class="line">    <span class="comment">###  此处需要在model定义页面通过枚举值转义配置对应展示中文信息,参考model模块代码设置</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      这种禁用编辑链接的放法只是不让它在页面中显示，即把超链接去掉了，</span></span><br><span class="line"><span class="string">      但是还是可以通过手动输入url的方式来进入编辑页面。</span></span><br><span class="line"><span class="string">      不过可以配合设置fieldsets或者readonly_fieldss来达到目的</span></span><br><span class="line"><span class="string">      注意：这里建议删除按钮要禁用掉，否则只有拥有view权限的人员依然可以进行删除动作，或者需要进行人员角色判断</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_add_permission</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 禁用添加按钮</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_delete_permission</span>(<span class="params">self, request, obj=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 禁用删除按钮</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-1d59985ecc174e84a36d2a92f860b4f3_720w.webp" alt="img"></p>
<h2 id="5、表单编辑页面配置"><a href="#5、表单编辑页面配置" class="headerlink" title="5、表单编辑页面配置"></a>5、表单编辑页面配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这一段主要用于屏蔽 【保存并继续编辑】以及【保存并新建下一个】的按钮，不符合用户习惯</span></span><br><span class="line"><span class="string">同时需要在 类的定义里面要重写</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.admin.templatetags.admin_modify <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> django.contrib.admin.templatetags.admin_modify <span class="keyword">import</span> submit_row <span class="keyword">as</span> original_submit_row</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;admin/submit_line.html&#x27;</span>, takes_context=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit_row</span>(<span class="params">context</span>):</span><br><span class="line">    ctx = original_submit_row(context)</span><br><span class="line">    ctx.update(&#123;</span><br><span class="line">        <span class="string">&#x27;show_save_and_add_another&#x27;</span>: context.get(<span class="string">&#x27;show_save_and_add_another&#x27;</span>, ctx[<span class="string">&#x27;show_save_and_add_another&#x27;</span>]),</span><br><span class="line">        <span class="string">&#x27;show_save_and_continue&#x27;</span>: context.get(<span class="string">&#x27;show_save_and_continue&#x27;</span>, ctx[<span class="string">&#x27;show_save_and_continue&#x27;</span>])</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> ctx</span><br><span class="line"><span class="comment"># --- 分割线 ---  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">job_detail</span>(admin.ModelAdmin):</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment"># fields 用于控制编辑页面内，需要编辑的字段，逐个显示所有的非AutoField和editable=True</span></span><br><span class="line">    <span class="comment">#        这里可以采用二维元组的方式进行设定对应字段是否在一行显示，可通过 浏览器开发者工具进行查看确认</span></span><br><span class="line">    <span class="comment"># fields = ((&#x27;JOB_NAME&#x27;, &#x27;JOB_TYPE&#x27;), &#x27;JOB_COMMENT&#x27;)</span></span><br><span class="line">    <span class="comment"># fieldsets 是二维元组列表，用于对编辑页面的布局，与fields属性互斥</span></span><br><span class="line">    fieldsets = (</span><br><span class="line">        (<span class="literal">None</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;JOB_NAME&#x27;</span>, <span class="string">&#x27;JOB_TYPE&#x27;</span>, <span class="string">&#x27;JOB_COMMENT&#x27;</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        (<span class="string">&#x27;更多操作&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;classes&#x27;</span>: (<span class="string">&#x27;wide&#x27;</span>, <span class="string">&#x27;extrapretty&#x27;</span>,),</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;IN_PARA&#x27;</span>, <span class="string">&#x27;OUT_PARA&#x27;</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line">    save_as_continue = <span class="literal">False</span> <span class="comment"># 修改完成之后跳转到元素列表页面</span></span><br><span class="line">    <span class="comment"># 重写方法屏蔽按钮</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change_view</span>(<span class="params">self, request, object_id, form_url=<span class="string">&#x27;&#x27;</span>, extra_context=<span class="literal">None</span></span>):</span><br><span class="line">        extra_context = extra_context <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">        extra_context[<span class="string">&#x27;show_save_and_add_another&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">        extra_context[<span class="string">&#x27;show_save_and_continue&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(job_detail, self).change_view(request, object_id,</span><br><span class="line">            form_url, extra_context=extra_context)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-31a55bdab11c94e8fe8e368c7804a175_720w.webp" alt="img"></p>
<h2 id="6、页面按钮权限配置"><a href="#6、页面按钮权限配置" class="headerlink" title="6、页面按钮权限配置"></a>6、页面按钮权限配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django admin 的权限模块 默认提供了增删改查的权限配置</span></span><br><span class="line">curr_per_set = &#123;<span class="string">&#x27;myapp.view_job_detail&#x27;</span>,<span class="string">&#x27;myapp.delete_job_detail&#x27;</span>,<span class="string">&#x27;myapp.add_job_detail&#x27;</span>,<span class="string">&#x27;myapp.change_job_detail&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 而当我们以下图为例：仅仅给某个用户赋权 查询 权限的时候，该用户还存在新增按钮的权限，对已有数据无操作权限，此处启发我们需要去思考页面上面按钮权限如何跟具体角色进行关联</span></span><br><span class="line"><span class="comment"># 当然 django admin 同样支持自定义权限，此处不再讨论</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-6522c58571c566aa4f3258b0848b81fb_720w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里演示了根据不同用户角色决定是否在页面上显示相应的功能按钮</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">job_detail</span>(admin.ModelAdmin):</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_add_permission</span>(<span class="params">self, request</span>):</span><br><span class="line">        user_per_set = request.user.get_all_permissions() <span class="comment"># 获取当前用户权限</span></span><br><span class="line">        <span class="comment"># 待判断的权限范围</span></span><br><span class="line">        curr_per_set = &#123;<span class="string">&#x27;myapp.view_job_detail&#x27;</span>,<span class="string">&#x27;myapp.delete_job_detail&#x27;</span>,<span class="string">&#x27;myapp.add_job_detail&#x27;</span>,<span class="string">&#x27;myapp.change_job_detail&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;myapp.add_job_detail&#x27;</span> <span class="keyword">in</span> curr_per_set.intersection(user_per_set):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-7f47263e31b815a0873fcab7e93ce799_720w.webp" alt="img"></p>
<h2 id="7、编辑页细致说明"><a href="#7、编辑页细致说明" class="headerlink" title="7、编辑页细致说明"></a>7、编辑页细致说明</h2><p>前文中我们已经介绍了简单的编辑页面的排版展示功能，接下来会更加详细的介绍编辑页面的排版，方便大家按照各自功能进行定制化开发</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># filesets的样式及描述文案</span></span><br><span class="line">    fieldsets = (</span><br><span class="line">        (<span class="literal">None</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;JOB_NAME&#x27;</span>, <span class="string">&#x27;JOB_TYPE&#x27;</span>, <span class="string">&#x27;JOB_COMMENT&#x27;</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        (<span class="string">&#x27;更多操作&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;classes&#x27;</span>: (<span class="string">&#x27;wide&#x27;</span>, <span class="string">&#x27;extrapretty&#x27;</span>,),</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;IN_PARA&#x27;</span>, <span class="string">&#x27;OUT_PARA&#x27;</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line"><span class="comment"># 这里我们通过classes进行fileset的样式定制，常用的主要有 collaspe和wide，collaspe是将fieldset进行折叠，wide主要是增加水平空间，但这两个参数在simpleui中无用处（可能是我们的姿势不对）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文案说明</span></span><br><span class="line">fieldsets = (</span><br><span class="line">        (<span class="literal">None</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;JOB_NAME&#x27;</span>, <span class="string">&#x27;JOB_TYPE&#x27;</span>, <span class="string">&#x27;JOB_COMMENT&#x27;</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        (<span class="string">&#x27;更多操作&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;classes&#x27;</span>: (<span class="string">&#x27;collaspe&#x27;</span>,),</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;IN_PARA&#x27;</span>, <span class="string">&#x27;OUT_PARA&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;&lt;h1&gt;输入输出参数描述文案&lt;/h1&gt;&#x27;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line"><span class="comment"># 这里可以发现 其实我们可以填充html语法，页面同样会直接进行渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 那针对每个单元格的描述应该怎么操作呢？这里我们需要通过对models的help_text的属性添加，一般这个功能用于针对某个具体的字段的使用说明上</span></span><br><span class="line">IN_PARA = models.CharField(<span class="string">&#x27;输入参数定义&#x27;</span>,max_length=<span class="number">32</span>,help_text=<span class="string">u&#x27;例如：按照这个样子&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-a067f88f218a2fac95446ac0be434f66_720w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多对多选择框 一般用于增加标签等方式上，但需要注意的是这个针对的many-to-many类型字段</span></span><br><span class="line"><span class="comment">## 这里务必要重写__str__方法，否则页面将不会展示具体内容</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">job_tags</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">job_detail</span>(models.Model):</span><br><span class="line">    ... ...</span><br><span class="line">    TAG = models.ManyToManyField(job_tags)</span><br><span class="line"><span class="comment">## 此时进行数据库迁移操作，系统会同时创建一张关系表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># admin.py中添加</span></span><br><span class="line">filter_horizontal = (<span class="string">&#x27;TAG&#x27;</span>,)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-8a7a2bd9335f96a8f579d98d6d1ed297_720w.webp" alt="img"></p>
<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-976df4e9ad9dd1efee3f4a6d2f3dc22d_720w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表页面如何显示 多对多 这种类型的字段,通过自定义函数进行返回详情以及描述</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tag_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;, &#x27;</span>.join([a.title <span class="keyword">for</span> a <span class="keyword">in</span> self.TAG.<span class="built_in">all</span>()])</span><br><span class="line">    tag_list.short_description = <span class="string">&#x27;标签&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># admin.py</span></span><br><span class="line">list_display = (<span class="string">&#x27;JOB_TYPE&#x27;</span>, <span class="string">&#x27;JOB_NAME&#x27;</span>,<span class="string">&#x27;JOB_COMMENT&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;IN_PARA&#x27;</span>,<span class="string">&#x27;IN_PARA_COMMENT&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;OUT_PARA&#x27;</span>,<span class="string">&#x27;OUT_PARA_COMMENT&#x27;</span>,<span class="string">&#x27;tag_list&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-3aab6711fc244b793f943aecaca1e864_720w.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只读字段</span></span><br><span class="line">readonly_fields = (<span class="string">&quot;CREATED_BY&quot;</span>,<span class="string">&#x27;CREATED_TIME&#x27;</span>,)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-c5fc7f38264436257d0210f41424cd5f_720w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动填充字段 eg:修改某条记录时，自动填充修改人为登录用户</span></span><br><span class="line"><span class="comment"># 时间字段处理，需要在model中指定，例如自动更新时间需要增加 auto_now属性,django使用的时间函数 timezone.now</span></span><br><span class="line">    CREATED_BY = models.CharField(<span class="string">&#x27;创建人&#x27;</span>,max_length=<span class="number">32</span>) <span class="comment"># 创建人</span></span><br><span class="line">    CREATED_TIME = models.DateTimeField(<span class="string">&#x27;创建时间&#x27;</span>,default=timezone.now) <span class="comment"># 创建时间</span></span><br><span class="line">    UPDATED_BY = models.CharField(<span class="string">&#x27;更新人&#x27;</span>,max_length=<span class="number">32</span>) <span class="comment"># 更新人</span></span><br><span class="line">    UPDATED_TIME = models.DateTimeField(<span class="string">&#x27;更新时间&#x27;</span>,auto_now = <span class="literal">True</span>)  <span class="comment"># 更新时间</span></span><br><span class="line"><span class="comment"># 获取登录人员信息，进行填充，需要重写save_model方法,同时记得设定成只读字段</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_model</span>(<span class="params">self, request, obj, form, change</span>):</span><br><span class="line">        <span class="keyword">if</span> change: <span class="comment"># 判断当前是修改状态还是新增状态</span></span><br><span class="line">            obj.UPDATED_BY = request.user.username</span><br><span class="line">            obj.save()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            obj.CREATED_BY = request.user.username</span><br><span class="line">            obj.UPDATED_BY = request.user.username</span><br><span class="line">            obj.save()</span><br><span class="line">    readonly_fields = (<span class="string">&quot;CREATED_BY&quot;</span>,<span class="string">&#x27;CREATED_TIME&#x27;</span>,<span class="string">&#x27;UPDATED_BY&#x27;</span>,<span class="string">&#x27;UPDATED_TIME&#x27;</span>,) </span><br><span class="line"><span class="comment">## 这里需要注意的是 获取request人员属性的方法</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-5c0e103a8f219f690e63aa72aedc5b8f_720w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 级联修改 一对多关联 一般用于维度表配置展示</span></span><br><span class="line"><span class="comment">## 利用外键，在多的一方，字段指定外键即可,但定义一对多的关系时候需要指定删除方式</span></span><br><span class="line">new_column = models.ForeignKey(<span class="string">&#x27;Rela_table&#x27;</span>, on_delete=models.PROTECT)</span><br><span class="line"><span class="comment">## models.CASCADE 此为默认值，级联删除，会删除关联数据</span></span><br><span class="line"><span class="comment">## models.PROTECT 只要存在关联数据就不能删除</span></span><br><span class="line"><span class="comment">## models.DO_NOTHING 什么也不做</span></span><br><span class="line"><span class="comment">### 子表中定义外键</span></span><br><span class="line">rela_id = models.ForeignKey(<span class="string">&quot;job_rela&quot;</span>, on_delete=models.DO_NOTHING,default=<span class="number">9999</span>, verbose_name=<span class="string">&quot;选择唯一一个父亲&quot;</span>)</span><br><span class="line"><span class="comment">### 定义依赖的父表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">job_rela</span>(models.Model):</span><br><span class="line">    rela_name = models.CharField(<span class="string">&#x27;依赖名称&#x27;</span>,max_length=<span class="number">128</span>) <span class="comment"># 任务名称</span></span><br><span class="line">    rela_id = models.CharField(<span class="string">&#x27;任务编号&#x27;</span>, max_length=<span class="number">32</span>)  <span class="comment"># 任务名称</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.rela_name</span><br><span class="line"><span class="comment">### admin中增加显示该字段即可      </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊的一对多，例如：行政区划</span></span><br><span class="line">parent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, verbose_name=<span class="string">&#x27;上级行政区划&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-cfa94434ce78bc2235ed4f5b124bb38d_720w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只显示当前登录用户自己的数据，超出范围不允许查看</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self, request</span>):</span><br><span class="line">        qs = <span class="built_in">super</span>(job_detail, self).get_queryset(request)</span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> qs</span><br><span class="line">        <span class="keyword">return</span> qs.<span class="built_in">filter</span>(CREATED_BY=request.user.username)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-3f782eadecc8ab69dc177a1710ac929c_720w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表页部分展示字段显示不同颜色</span></span><br><span class="line"><span class="comment">## model中定义字段颜色，通过函数定义</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">colored_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.PRO_STATUS == <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">            cl_name = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cl_name = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> format_html(</span><br><span class="line">            <span class="string">&#x27;&lt;span style=&quot;color: &#123;&#125;;&quot;&gt;&#123;&#125;&lt;/span&gt;&#x27;</span>,</span><br><span class="line">            cl_name,</span><br><span class="line">            self.PRO_STATUS,</span><br><span class="line">        )</span><br><span class="line">    colored_name.short_description = <span class="string">&#x27;状态&#x27;</span></span><br><span class="line"><span class="comment">## admin中直接引入即可 这里一个大括号代表一个入参</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-08230449191a9408f5bf6b75e36f6817_720w.webp" alt="img"></p>
<h2 id="8、集成富文本编辑器实现数据字典展示功能"><a href="#8、集成富文本编辑器实现数据字典展示功能" class="headerlink" title="8、集成富文本编辑器实现数据字典展示功能"></a>8、集成富文本编辑器实现数据字典展示功能</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据字典的model信息，包含主表以及字段表，其中主表跟字段表通过主外键进行一对多的关联</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dict_table</span>(models.Model):</span><br><span class="line">    table_name = models.CharField(max_length=<span class="number">64</span>,verbose_name=<span class="string">&#x27;表名称&#x27;</span>)</span><br><span class="line">    table_comment = models.CharField(max_length=<span class="number">256</span>,verbose_name=<span class="string">&#x27;描述&#x27;</span>)</span><br><span class="line">    table_short_desc = models.CharField(max_length=<span class="number">128</span>,verbose_name=<span class="string">&#x27;简述&#x27;</span>)</span><br><span class="line">    create_time = models.DateTimeField(verbose_name=<span class="string">&#x27;创建时间&#x27;</span>,default=timezone.now())</span><br><span class="line">    owner = models.CharField(verbose_name=<span class="string">&#x27;归属人&#x27;</span>,default=<span class="string">&#x27;admin&#x27;</span>,max_length=<span class="number">64</span>)</span><br><span class="line">    update_time = models.DateTimeField(verbose_name=<span class="string">&#x27;修改时间&#x27;</span>,auto_now=<span class="literal">True</span>)</span><br><span class="line">    description = models.TextField(verbose_name=<span class="string">&#x27;备注&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.table_name</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = <span class="string">&#x27;字典表&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;字典表&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dict_columns</span>(models.Model):</span><br><span class="line">    table_id = models.ForeignKey(<span class="string">&#x27;dict_table&#x27;</span>,on_delete=models.CASCADE,verbose_name=<span class="string">&#x27;关联表主键&#x27;</span>)</span><br><span class="line">    column_name = models.CharField(max_length=<span class="number">128</span>,verbose_name=<span class="string">&#x27;字段名称&#x27;</span>)</span><br><span class="line">    column_comment = models.CharField(max_length=<span class="number">128</span>,verbose_name=<span class="string">&#x27;字段含义及说明&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = <span class="string">&#x27;字段详情&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;字段详情&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加测试记录</span></span><br><span class="line"><span class="comment"># admin文件中创建表名的列表页并且注册到路由中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dict_columns</span>(admin.TabularInline):</span><br><span class="line">    model = dict_columns</span><br><span class="line">    can_delete = <span class="literal">False</span></span><br><span class="line">    show_change_link = <span class="literal">False</span></span><br><span class="line">    extra = <span class="number">1</span></span><br><span class="line">    editable_fields = []</span><br><span class="line">    list_display = [<span class="string">&#x27;column_name&#x27;</span>,<span class="string">&#x27;column_comment&#x27;</span>]</span><br><span class="line">    list_display_links = ()</span><br><span class="line">    readonly_fields = [<span class="string">&#x27;column_name&#x27;</span>,<span class="string">&#x27;column_comment&#x27;</span>]</span><br><span class="line">    original = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_add_permission</span>(<span class="params">self, request,obj=<span class="literal">None</span></span>):</span><br><span class="line">        user_per_set = request.user.get_all_permissions() <span class="comment"># 获取当前用户权限</span></span><br><span class="line">        <span class="comment"># 待判断的权限范围</span></span><br><span class="line">        curr_per_set = &#123;<span class="string">&#x27;myapp.view_dict_columns&#x27;</span>,<span class="string">&#x27;myapp.delete_dict_columns&#x27;</span>,<span class="string">&#x27;myapp.add_dict_columns&#x27;</span>,<span class="string">&#x27;myapp.change_dict_columns&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;myapp.add_dict_columns&#x27;</span> <span class="keyword">in</span> curr_per_set.intersection(user_per_set):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">dict_table</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dict_table</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">&#x27;table_name&#x27;</span>, <span class="string">&#x27;table_short_desc&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;owner&#x27;</span>)</span><br><span class="line">    list_display_links = (<span class="string">&#x27;table_name&#x27;</span>,)</span><br><span class="line">    list_filter = (<span class="string">&#x27;table_name&#x27;</span>,)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_add_permission</span>(<span class="params">self, request,obj=<span class="literal">None</span></span>):</span><br><span class="line">        user_per_set = request.user.get_all_permissions() <span class="comment"># 获取当前用户权限</span></span><br><span class="line">        <span class="comment"># 待判断的权限范围</span></span><br><span class="line">        curr_per_set = &#123;<span class="string">&#x27;myapp.view_dict_table&#x27;</span>,<span class="string">&#x27;myapp.delete_dict_table&#x27;</span>,<span class="string">&#x27;myapp.add_dict_table&#x27;</span>,<span class="string">&#x27;myapp.change_dict_table&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;myapp.add_dict_table&#x27;</span> <span class="keyword">in</span> curr_per_set.intersection(user_per_set):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_delete_permission</span>(<span class="params">self, request, obj=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    save_as_continue = <span class="literal">False</span>  <span class="comment"># 修改完成之后跳转到元素列表页面</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change_view</span>(<span class="params">self, request, object_id, form_url=<span class="string">&#x27;&#x27;</span>, extra_context=<span class="literal">None</span></span>):</span><br><span class="line">        extra_context = extra_context <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">        extra_context[<span class="string">&#x27;show_save_and_add_another&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">        extra_context[<span class="string">&#x27;show_save_and_continue&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(dict_table, self).change_view(request, object_id,</span><br><span class="line">                                                   form_url, extra_context=extra_context)</span><br><span class="line"></span><br><span class="line">    fieldsets = (</span><br><span class="line">        (<span class="string">&#x27;基本信息&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;table_name&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>,<span class="string">&#x27;update_time&#x27;</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        (<span class="string">&#x27;说明&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;description&#x27;</span>, )</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line">    readonly_fields = (<span class="string">&quot;table_name&quot;</span>, <span class="string">&#x27;create_time&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>, <span class="string">&#x27;update_time&#x27;</span>,)</span><br><span class="line">    inlines = [dict_columns,]</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-7bd792665793b70eb6ca0d2f192548ce_720w.webp" alt="img"></p>
<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-7bd792665793b70eb6ca0d2f192548ce_720w-170038127073820.webp" alt="img"></p>
<h2 id="9、自定义按钮实现导入导出功能"><a href="#9、自定义按钮实现导入导出功能" class="headerlink" title="9、自定义按钮实现导入导出功能"></a>9、自定义按钮实现导入导出功能</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 出处：参考simpleui官方文档</span></span><br><span class="line">        <span class="comment"># 增加自定义按钮</span></span><br><span class="line">    actions = [<span class="string">&#x27;custom_button&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">custom_button</span>(<span class="params">self, request, queryset</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示的文本，与django admin一致</span></span><br><span class="line">    custom_button.short_description = <span class="string">&#x27;测试按钮&#x27;</span></span><br><span class="line">    <span class="comment"># icon，参考element-ui icon与https://fontawesome.com</span></span><br><span class="line">    custom_button.icon = <span class="string">&#x27;fas fa-audio-description&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定element-ui的按钮类型，参考https://element.eleme.cn/#/zh-CN/component/button</span></span><br><span class="line">    custom_button.<span class="built_in">type</span> = <span class="string">&#x27;danger&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给按钮追加自定义的颜色</span></span><br><span class="line">    custom_button.style = <span class="string">&#x27;color:black;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接按钮，设置之后直接访问该链接</span></span><br><span class="line">    <span class="comment"># 3中打开方式</span></span><br><span class="line">    <span class="comment"># action_type 0=当前页内打开，1=新tab打开，2=浏览器tab打开</span></span><br><span class="line">    <span class="comment"># 设置了action_type，不设置url，页面内将报错</span></span><br><span class="line">    <span class="comment"># 设置成链接类型的按钮后，custom_button方法将不会执行。</span></span><br><span class="line"></span><br><span class="line">    custom_button.action_type = <span class="number">1</span></span><br><span class="line">    custom_button.action_url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/19/Django-SimpleUI%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/v2-85f689989699b3ed30c4f9e59b545a44_720w.webp" alt="img"></p>
<h2 id="10、Echart组件引入以及页面个性化调整"><a href="#10、Echart组件引入以及页面个性化调整" class="headerlink" title="10、Echart组件引入以及页面个性化调整"></a>10、Echart组件引入以及页面个性化调整</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django admin 支持自定义template，大部分情况下我们是需要重新修改 change页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RecordAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    change_form_template = <span class="string">&#x27;admin/extras/record_change_form.html&#x27;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># 这个我们定义的页面需要继承 &#123;% extends &quot;admin/change_form.html&quot; %&#125;</span></span><br><span class="line"><span class="comment"># 在urls.py中添加一条对应的url信息以及对应的view函数进行处理渲染</span></span><br></pre></td></tr></table></figure>

<h1 id="四、应用部署步骤"><a href="#四、应用部署步骤" class="headerlink" title="四、应用部署步骤"></a>四、应用部署步骤</h1><p>Step1、安装ngnix</p>
<p>Step2、安装uwsgi</p>
<p>Step3、配置uwsgi</p>
<p>Step4、配置ngnix</p>
<p>Step5、启动服务</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>摘录文章：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/113447102?utm_id=0">https://zhuanlan.zhihu.com/p/113447102?utm_id=0</a></li>
</ul>
<p>参考文章：</p>
<ul>
<li><a href="https://github.com/newpanjing/simpleui%EF%BC%88%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80%EF%BC%89">https://github.com/newpanjing/simpleui（项目地址）</a></li>
<li><a href="https://www.mldoo.com/%EF%BC%88%E7%A4%BE%E5%8C%BA%EF%BC%89">https://www.mldoo.com/（社区）</a></li>
<li><a href="https://newpanjing.github.io/simpleui_docs/%EF%BC%88%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%89">https://newpanjing.github.io/simpleui_docs/（官方文档）</a></li>
</ul>
]]></content>
      <categories>
        <category>django学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>后台开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile 详解01</title>
    <url>/2023/11/12/Dockerfile%20%E8%AF%A6%E8%A7%A301/</url>
    <content><![CDATA[<h1 id="常见的指令记录"><a href="#常见的指令记录" class="headerlink" title="常见的指令记录"></a>常见的指令记录</h1><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><p>两种形式如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;IMAGE&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;IMAGE&gt;:&lt;TAG&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过FROM指定的镜像名称必须是一个已经存在的镜像，这个镜像称之为基础镜像，必须位于第一条非注释指令</p>
</blockquote>
<h2 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> &lt;NAME&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>指定镜像的作者信息，包含镜像的所有者和联系人信息</p>
</blockquote>
<h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;<span class="built_in">command</span>&gt; (shell模式)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [ <span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span> ] (<span class="built_in">exec</span>模式)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在shell模式下，是使用&#x2F;bin&#x2F;sh -c COMMAND来运行命令的<br>在exec模式下可以指定其他的shell来运行命令RUN [“&#x2F;bin&#x2F;bash”, “-c”, “echo hello”]</p>
</blockquote>
<p>多条RUN指令可以合并为一条：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RUN yum install httpd &amp;&amp; yum install ftp</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样在构建的时候会减少产生中间层镜像</p>
</blockquote>
<h2 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a><strong>EXPOSE</strong></h2><blockquote>
<p>指定运行该镜像的容器使用的端口，可以是多个。</p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;PORT&gt;</span><br></pre></td></tr></table></figure>

<p>使用这个指令的目的是告诉应用程序容器内应用程序会使用的端口，在运行时还需要使用-p参数指定映射端口。这是docker处于安全的目的，不会自动打开端口。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -p 80 -d dockertest/dockerfile_build nginx -g <span class="string">&quot;daemon off&quot;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a><strong>CMD</strong></h2><p>用于提供容器运行的默认命令，如果在<code>docker run</code>时指定了运行的命令，则CMD命令不会执行。CMD有三种模式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> &lt;<span class="built_in">command</span>&gt; (shell模式)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span> ] (<span class="built_in">exec</span>模式)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&#x27;param1&#x27;</span>, <span class="string">&#x27;param2&#x27;</span>] (通常与ENTRYPOINT搭配指定ENTRYPOINT的默认参数)</span></span><br></pre></td></tr></table></figure>

<h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a><strong>ENTRYPOINT</strong></h2><p>与CMD类似，ENTRYPOINT不会被<code>docker run</code>中指定的命令覆盖，如果想覆盖ENTRYPOINT，则需要在<code>docker run</code>中指定<code>--entrypoint</code>选项</p>
<p>它有两种模式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> &lt;<span class="built_in">command</span>&gt; (shell模式)</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span> ] (<span class="built_in">exec</span>模式)</span></span><br></pre></td></tr></table></figure>

<h2 id="ADD和COPY"><a href="#ADD和COPY" class="headerlink" title="ADD和COPY"></a><strong>ADD和COPY</strong></h2><p>作用都是将文件或目录复制到Dockerfile构建的镜像中</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> &lt;src&gt; &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span> <span class="string">&quot;&lt;dest&gt;&quot;</span>] (适用于文件路径包含空格的情况)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> &lt;src&gt; &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span> <span class="string">&quot;&lt;dest&gt;&quot;</span>] (适用于文件路径包含空格的情况)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ADD包含了类似tar的解压功能，如果只是单纯复制文件，建议使用COPY，而且，两者的源文件路径使用Dockerfile相对路径，目标路径使用绝对路径。</p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> index.html /var/www/html</span></span><br></pre></td></tr></table></figure>

<h2 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a><strong>VOLUME</strong></h2><p>用于向容器添加卷，可以提供共享存储等功能</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&#x27;/data&#x27;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a><strong>WORKDIR</strong></h2><p>在容器内部设置工作目录，这样ENTRYPOINT和CMD指定的命令都会在容器中这个目录下进行。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span></span><br></pre></td></tr></table></figure>

<h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a><strong>ENV</strong></h2><p>用于设置环境变量</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;KEY&gt; &lt;VALUE&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;KEY&gt;=&lt;VALUE&gt;</span><br></pre></td></tr></table></figure>

<h2 id="USER"><a href="#USER" class="headerlink" title="USER"></a><strong>USER</strong></h2><p>用于指定镜像为什么用户去运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>镜像就会以nginx身份运行，可以使用uid，gid等各种组合使用</p>
</blockquote>
<h2 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a><strong>ONBUILD</strong></h2><p>为镜像创建触发器，当一个镜像被用作其他镜像的基础镜像时，这个触发器会被执行。当子镜像被构建时会插入触发器中的指令</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">COPY</span><span class="language-bash"> index.html /var/www/html</span></span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile的构建过程"><a href="#Dockerfile的构建过程" class="headerlink" title="Dockerfile的构建过程"></a><strong>Dockerfile的构建过程</strong></h2><ol>
<li>docker会从Dockerfile文件头FROM指定的基础镜像运行一个容器</li>
<li>然后执行一条指令，对容器修改</li>
<li>接着执行类似docker commit的操作，创建新的镜像层</li>
<li>在基于刚创建的镜像运行一个新的容器</li>
<li>执行Dockerfile下一条指令，直到所有指令执行完毕</li>
</ol>
<blockquote>
<p>docker会删除中间层创建的容器，但不会删除中间层镜像，所以可以使用docker run运行一个中间层容器，从而查看每一步构建后的镜像状态，这样就可以进行调试。</p>
</blockquote>
<h2 id="构建缓存"><a href="#构建缓存" class="headerlink" title="构建缓存"></a><strong>构建缓存</strong></h2><p>docker在构建过程中会将之前构建的镜像看做缓存。</p>
<p>当第一次构建的时候，构建过程会比较慢，而在此进行相同的构建的时候，会看见using cache字样，表示使用了缓存，构建过程也非常快。</p>
<p>如果不想使用构建缓存，则在docker build中使用—no-cache选项。</p>
<p>还可以在Dockerfile中使用ENV REFRESH_DATE 2018-01-01来制定缓存刷新时间，更改这个时间，就会让后面的命令不使用缓存。</p>
<p><code>Dockerfile</code> 简单列举几个指令:</p>
<ul>
<li><code>FROM</code> : 指定基础镜像</li>
<li><code>WORKDIR</code> : 指定工作目录</li>
<li><code>COPY</code> : 将文件或者目录从构建上下文复制到容器中(推荐)</li>
<li><code>ADD</code> : 将文件或者目录从构建上下文复制到容器中,并且会将压缩文件解压缩,支持 <code>URL</code></li>
<li><code>RUN</code> : 在容器中执行命令</li>
<li><code>CMD</code> : 容器启动时执行的命令</li>
<li><code>EXPOSE</code> : 指定要监听的端口以实现与外部通信</li>
</ul>
<p>简单的例子：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nodejs server Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FROM node</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /nodeApp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># COPY &lt;宿主机目录或文件路径&gt; &lt;容器内目录或文件路径&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./package.json .</span></span><br><span class="line"><span class="comment"># ADD &lt;宿主机目录或文件路径&gt; &lt;容器内目录或文件路径&gt;</span></span><br><span class="line"><span class="comment"># ADD ./package.json .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shell格式：就像在命令行中输入的Shell脚本命令一样。</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src ./server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;./server/index.js&quot;</span>]</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>docker学习笔记</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>学习笔记</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令记录</title>
    <url>/2023/11/12/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="docker-常用命令记录"><a href="#docker-常用命令记录" class="headerlink" title="docker 常用命令记录"></a>docker 常用命令记录</h1><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h2><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure>

<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull tomcat:tag</span><br></pre></td></tr></table></figure>

<p>不加 <code>tag</code> 的情况下, 默认拉取的就是 <code>latest</code>(最新版本)</p>
<h3 id="使用Dockerfile构建镜像"><a href="#使用Dockerfile构建镜像" class="headerlink" title="使用Dockerfile构建镜像"></a>使用<code>Dockerfile</code>构建镜像</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker build -t 镜像名:版本号 .  注意最后边的点 `.` 表示当前目录, 别丢了.</span></span><br><span class="line">docker build -t my_image:<span class="number">1.0</span> .</span><br></pre></td></tr></table></figure>

<p><code>Docker</code> <code>build</code> 命令可以使用 <code>Dockerfile</code> 来构建镜像。默认情况下，<code>Dockerfile</code> 文件位于构建上下文的根目录下，因此 <code>docker build</code> 命令会自动读取上下文根路径下名为 <code>Dockerfile</code> 的文件。如果 <code>Dockerfile</code> 文件不在根目录下，可以使用 <code>-f</code> 选项来指定 <code>Dockerfile</code> 文件的路径。例如，以下命令将使用 <code>/path/to/Dockerfile</code> 文件构建镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -f /path/to/Dockerfile -t image_name:tag .</span><br></pre></td></tr></table></figure>

<h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="查看本地镜像-ID"><a href="#查看本地镜像-ID" class="headerlink" title="查看本地镜像 ID"></a>查看本地镜像 <code>ID</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images -q</span><br></pre></td></tr></table></figure>

<h3 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi mysql:5.7</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line"></span><br><span class="line">docker rmi 2be84dd575ee</span><br></pre></td></tr></table></figure>

<p>删除<code>tag</code>为<code>none</code>的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi `docker images -f &quot;dangling=true&quot; -q`</span><br></pre></td></tr></table></figure>

<p>全部删除本地镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi `docker images -q`</span><br></pre></td></tr></table></figure>

<h3 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker save -o 给导出的镜像压缩包起个文件名 要导出的镜像名:版本号</span><br><span class="line">docker save -o image.tar target_image:tag</span><br></pre></td></tr></table></figure>

<h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker load -i 指定要导入的镜像压缩包文件名</span><br><span class="line">docker load -i image.tar</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TIP:<br>如果用镜像 <code>ID</code> 导出的镜像在导入之后是没有名字和<code>tag</code>的, 这种情况我们可以使用 <code>docker tag</code> 给镜像改名字</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag image_id new_image_name:tag</span><br></pre></td></tr></table></figure>

<h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a><strong>容器相关命令</strong></h2><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=my_container -p 8080:8080 tomcat:latest</span><br></pre></td></tr></table></figure>

<p><code>Docker</code> 创建容器的命令是 <code>docker run</code>。以下是一些常用的参数：</p>
<ul>
<li><code>-d</code>: 后台运行容器，并返回容器<code>ID</code>；</li>
<li><code>-p</code>: 指定端口映射，格式为：主机(宿主)端口:容器端口；</li>
<li><code>-i</code>: 以交互模式运行容器，通常与 <code>-t</code> 同时使用；</li>
<li><code>-t</code>: 为容器重新分配一个伪输入终端，通常与 <code>-i</code> 同时使用；</li>
<li><code>--name=my_container</code>: 为容器指定一个名称；</li>
<li><code>--dns 8.8.8.8</code>: 指定容器使用的<code>DNS</code>服务器，默认和宿主一致；</li>
</ul>
<p>你可以根据你的需求来选择相应的参数。最后是使用的镜像名和版本号</p>
<blockquote>
<p>tip:<br>使用交互模式运行容器时, 会直接进入容器内部, 退出交互模式后, 该容器自动停止运行</p>
</blockquote>
<h3 id="查看容器列表"><a href="#查看容器列表" class="headerlink" title="查看容器列表"></a>查看容器列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看正在运行的容器列表</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"># 查看最近一次创建的容器</span><br><span class="line">docker ps -l</span><br><span class="line"></span><br><span class="line"># 查看正在运行的容器ID列表</span><br><span class="line">docker ps -q</span><br><span class="line"></span><br><span class="line"># 查看全部容器(包括已经停止的容器)</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"># 查看全部容器ID列表</span><br><span class="line">docker ps -aq</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="停止运行的容器"><a href="#停止运行的容器" class="headerlink" title="停止运行的容器"></a>停止运行的容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用容器名停止</span><br><span class="line">docker stop my_container</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line"># 使用容器ID停止</span><br><span class="line">docker stop container_id</span><br><span class="line"></span><br><span class="line"># 使用容器ID停止多个正在运行的容器</span><br><span class="line">docker stop `docker ps -q`</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启动已停止的容器"><a href="#启动已停止的容器" class="headerlink" title="启动已停止的容器"></a>启动已停止的容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 容器名</span><br><span class="line">docker start my_container</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line"># 容器ID</span><br><span class="line">docker start container_id</span><br><span class="line"></span><br><span class="line"># 使用容器ID启动多个已停止的容器</span><br><span class="line">docker start `docker ps -aq`</span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用容器名删除</span><br><span class="line">docker rm my_container</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line"># 用容器ID删除</span><br><span class="line">docker rm container_id</span><br><span class="line"></span><br><span class="line"># 删除多个未运行的容器, 运行中的无法删除</span><br><span class="line">docker rm `docker ps -aq`</span><br></pre></td></tr></table></figure>

<h3 id="进入容器-正在运行的容器才可以进入"><a href="#进入容器-正在运行的容器才可以进入" class="headerlink" title="进入容器(正在运行的容器才可以进入)"></a>进入容器(正在运行的容器才可以进入)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用容器名</span><br><span class="line">docker exec -it my_container /bin/bash</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line"># 使用容器ID</span><br><span class="line">docker exec -it container_id /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 容器名</span><br><span class="line">docker inspect my_container</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line"># 容器ID</span><br><span class="line">docker inspect container_id</span><br></pre></td></tr></table></figure>

<h3 id="容器与宿主机之间的数据拷贝"><a href="#容器与宿主机之间的数据拷贝" class="headerlink" title="容器与宿主机之间的数据拷贝"></a>容器与宿主机之间的数据拷贝</h3><h4 id="将容器中目录或文件拷贝到宿主机"><a href="#将容器中目录或文件拷贝到宿主机" class="headerlink" title="将容器中目录或文件拷贝到宿主机"></a>将容器中目录或文件拷贝到宿主机</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将容器中 /app/html 目录拷贝到宿主机 /mnt/ 目录中</span><br><span class="line">docker cp container_id:/app/html /mnt/</span><br><span class="line"># 将容器中 /app/html/index.html 文件拷贝到宿主机 /mnt/dist/ 目录中</span><br><span class="line">docker cp container_id:/app/html/index.html /mnt/dist/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="将宿主机目录或文件拷贝到容器中"><a href="#将宿主机目录或文件拷贝到容器中" class="headerlink" title="将宿主机目录或文件拷贝到容器中"></a>将宿主机目录或文件拷贝到容器中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将宿主机 /mnt/dist 目录拷贝到容器的 /app 目录中</span><br><span class="line">docker cp /mnt/dist container_id:/app/</span><br><span class="line"># 将宿主机 /mnt/dist/index.html 文件拷贝到容器的 /app/html 目录中</span><br><span class="line">docker cp /mnt/dist/index.html container_id:/app/html/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="将宿主机-mnt-dist目录拷贝到容器中-并重命名为html"><a href="#将宿主机-mnt-dist目录拷贝到容器中-并重命名为html" class="headerlink" title="将宿主机/mnt/dist目录拷贝到容器中, 并重命名为html"></a>将宿主机<code>/mnt/dist</code>目录拷贝到容器中, 并重命名为<code>html</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将宿主机 /mnt/dist 目录拷贝到容器的 /app/ 中重命名为 html</span><br><span class="line">docker cp /mnt/dist container_id:/app/html</span><br><span class="line"># 将宿主机 /mnt/dist/index1.html 文件拷贝到容器的 /app/html/ 中重命名为 index.html</span><br><span class="line">docker cp /mnt/dist/index1.html container_id:/app/html/index.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 导出的容器快照文件可以再导入为镜像</span><br><span class="line">docker logs [容器ID]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个命令有以下常用参数 -f : 跟踪日志输出</p>
<p>–since :显示某个开始时间的所有日志 -t : 显示时间戳 –tail :仅列出最新N条容器日志</p>
</blockquote>
]]></content>
      <categories>
        <category>docker学习笔记</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>学习笔记</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive优化(一)</title>
    <url>/2023/07/24/Hive%E4%BC%98%E5%8C%96-%E4%B8%80/</url>
    <content><![CDATA[<blockquote>
<p>本文中仅有大题的思路，初步学习，参考用。详细的调优还需要后续遇到问题慢慢学习，我想。</p>
</blockquote>
<h1 id="1、影响Hive效率主要原因"><a href="#1、影响Hive效率主要原因" class="headerlink" title="1、影响Hive效率主要原因"></a>1、影响Hive效率主要原因</h1><ol>
<li><p>最主要是读取数据占用硬盘输入输出IO、网络传输，访问一次表，就产生一次MapReduce，就会产生一次IO</p>
</li>
<li><p>其次是大数据计算占用内存</p>
</li>
<li><p>计算逻辑相对简单，CPU占用较少</p>
</li>
</ol>
<h1 id="2、Hive问题排查与调优思路"><a href="#2、Hive问题排查与调优思路" class="headerlink" title="2、Hive问题排查与调优思路"></a>2、Hive问题排查与调优思路</h1><h2 id="查看hive性能问题"><a href="#查看hive性能问题" class="headerlink" title="查看hive性能问题"></a>查看hive性能问题</h2><ol>
<li><p>查看元数据：记录Hive数据库、表、分区、列等统计信息</p>
</li>
<li><p>查看执行计划：描述计算引擎的执行逻辑</p>
</li>
<li><p>查看YARN日志：有SQL执行完具体的量化数据</p>
</li>
</ol>
<h2 id="Hive优化方式"><a href="#Hive优化方式" class="headerlink" title="Hive优化方式"></a>Hive优化方式</h2><ol>
<li><p>优化存储：数据块、数据存储格式、分区分桶</p>
</li>
<li><p>优化执行过程：SQL优化、hint提示、set命令</p>
</li>
<li><p>优化作业调度：</p>
</li>
</ol>
<h2 id="Hive-SQL优化原则"><a href="#Hive-SQL优化原则" class="headerlink" title="Hive SQL优化原则"></a>Hive SQL优化原则</h2><p>（1-5是SQL通用原则，6开始是Hive特殊原则）</p>
<ol>
<li><p>坚持简洁的代码，随着Hive SQL语法完善，实现同样的功能，往往越简单的代码越高效</p>
</li>
<li><p>先分析数据存储情况再改代码，如存储格式、数据量、数据分布、是否倾斜</p>
</li>
<li><p>减少访问同个表次数</p>
</li>
<li><p>分步处理，不要一段脚本过于复杂</p>
</li>
<li><p>尽量用Hive SQL自带语法，如grouping set、rollup、cube</p>
</li>
<li><p>少用Reduce阶段操作：如表连接、group by、distinct、聚集函数、分析函数</p>
</li>
<li><p>少用Hint或者不用Hint</p>
</li>
<li><p>不要用索引</p>
</li>
<li><p>合理使用分区分桶</p>
</li>
<li><p>Hive适合处理宽表，适当的冗余有助于Hive的处理性能</p>
</li>
<li><p>不怕数据量大，防止数据倾斜</p>
</li>
</ol>
<blockquote>
<p>数据倾斜即指<strong>在大数据计算任务中某个处理任务的进程（通常是一个JVM 进程）被分配到的任务量过多，进程运行时间超长甚至最终失败，进而导致整个计算任务超长时间运行或者失败</strong>。</p>
</blockquote>
<h1 id="3-Hive4大组件"><a href="#3-Hive4大组件" class="headerlink" title="3 Hive4大组件"></a>3 Hive4大组件</h1><p><strong>元数据、分布式文件系统、计算引擎、资源管理和调度</strong></p>
<p><strong>元数据</strong>：记录Hive数据库、表、分区、列等统计信息</p>
<p>元数据存在MySQL的metastore库中，Hive3.0可以在Hive的sys库查询。</p>
<p><strong>数据存储</strong>：HDFS分布式文件系统</p>
<p><strong>计算引擎</strong>：MapReduce、Tez、Spark</p>
<p><strong>MapReduce</strong>：Hive2.0不再推荐使用，步骤简单，固定Map、Reduce两个操作，不灵活，计算代码量大，延迟量大</p>
<p><strong>Tez</strong>：将Map、Reduce两个操作简化为一个概念Vertex，拆分成多个组成，可以减少很多没必要步骤，允许小数据完全在内存中处理</p>
<p><strong>Spark</strong>：DAG有向无环图，高效、低延迟，提供多种接口实现计算</p>
<p><strong>作业资源调度</strong>：YARN、Mesos</p>
<p><strong>YARN</strong>：资源调度系统，可以查看Tracking URL日志链接，有SQL执行完具体的量化数据</p>
<h1 id="4-MapReduce计算引擎"><a href="#4-MapReduce计算引擎" class="headerlink" title="4 MapReduce计算引擎"></a>4 MapReduce计算引擎</h1><p>是大数据计算引擎，也是编程模型。</p>
<p>输入输出格式是键值对</p>
<p>所有作业都拆分成Map和Reduce两个步骤进行处理。</p>
<p>提供Map和Reduce两个编程接口，可以让用户在此基础上编写自己的业务代码，不用关心整个分布式计算框架的背后原理。</p>
<h2 id="MapReduce整体环节"><a href="#MapReduce整体环节" class="headerlink" title="MapReduce整体环节"></a>MapReduce整体环节</h2><p>Input-Mapper-Shuffle-Reducer-Output</p>
<p>Mapper接口：映射分散，输入输出格式为键值对，逻辑会分发到集群各个节点，读取该节点数据进行处理，最后写入本地。不移动数据，只移动计算逻辑。</p>
<p>Reducer接口：合并缩减，读取Map输出，并按相同键划分到各个Reducer任务</p>
<p>Shuffle过程：Mapper输出到Reducer输入的过程，一般表连接在这个过程。</p>
<p>Combiner接口：Map端的Reduce，逻辑同Reduce，在Map端本地计算。</p>
<h1 id="5-HiveSQL执行计划"><a href="#5-HiveSQL执行计划" class="headerlink" title="5 HiveSQL执行计划"></a>5 HiveSQL执行计划</h1><p>explain select sum(credit_amt) from tmp_cch_001;</p>
<p>explain extended select sum(credit_amt) from tmp_cch_001; –更详细执行计划</p>
<p>Hive执行计划都是预估的</p>
<p>Oracle执行计划可以提供真实的计划，即SQL实际执行完成后才获得的执行计划。</p>
<p>Hive2.0执行计划加大CBO的支持</p>
<h2 id="执行计划基本信息"><a href="#执行计划基本信息" class="headerlink" title="执行计划基本信息"></a>执行计划基本信息</h2><p>一个hvie任务包含多个阶段stage，不同stage间存在依赖关系，越复杂的查询越多stage。</p>
<p>一个stage可以是一个MapReduce任务，也可以是一个抽样、合并、limit。</p>
<p>默认一次只执行一个stage，开并行可以同时执行多个stage。</p>
<p>Stage-0：客户端读取执行计划结果</p>
<p>Map阶段操作：主要涉及select、from、where、本地group by，map join</p>
<p>Reduce阶段操作：主要涉及表连接、group by、distinct、聚集函数、分析函数</p>
<p>分区过滤：会在map上一个阶段，即在输入阶段进行路径过滤</p>
<h2 id="执行计划关键字解释"><a href="#执行计划关键字解释" class="headerlink" title="执行计划关键字解释"></a>执行计划关键字解释</h2><p>STAGE DEPENDENCIES：作业的依赖关系</p>
<p>STAGE PLANS：每个作业的详细信息</p>
<p>Map Reduce：执行引擎</p>
<p>Map Operator Tree</p>
<p>TableScan：扫描，即from</p>
<p>Statistics：统计信息，包含行数、文件大小</p>
<p>Filter Operator：行过滤，即where</p>
<p>Select Operator：列筛选，即select</p>
<p>Group By Operator：map端group by，分组聚集</p>
<p>Reduce Output Operator：map输出，即Shuffle流程，将本地相同键的值合并排序输出到Reduce</p>
<p>Reduce Operator Tree</p>
<p>Join Operator：表连接join</p>
<p>Group By Operator：Reduce端group by</p>
<p>Select Operator：输出字段</p>
<p>File Output Operator：Reduce输出文件信息</p>
<h2 id="MapReduce统计信息"><a href="#MapReduce统计信息" class="headerlink" title="MapReduce统计信息"></a>MapReduce统计信息</h2><p>Total jobs：作业数</p>
<p>Stage-Stage-n：MapReduce任务</p>
<p>Total MapReduce CPU Time Spent：程序占用CPU资源时间</p>
<p>Time taken：用户等待时间</p>
<h2 id="执行计划实例"><a href="#执行计划实例" class="headerlink" title="执行计划实例"></a>执行计划实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain </span><br><span class="line">select usr_sts_cd,count(1) cnt</span><br><span class="line">from biee.tb_d_userinfo </span><br><span class="line">where start_dt&gt;=20210101</span><br><span class="line">group by usr_sts_cd</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">STAGE DEPENDENCIES:</span><br><span class="line"> Stage-1 is a root stage</span><br><span class="line"> Stage-0 depends on stages: Stage-1</span><br><span class="line"> </span><br><span class="line">STAGE PLANS:</span><br><span class="line"> Stage: Stage-1</span><br><span class="line"> Map Reduce</span><br><span class="line"> Map Operator Tree:</span><br><span class="line"> TableScan</span><br><span class="line"> alias: tb_d_userinfo</span><br><span class="line"> Statistics: Num rows: 8656238 Data size: 1129252772 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line"> Filter Operator</span><br><span class="line"> predicate: (start_dt &gt;= 20210101) (type: boolean)</span><br><span class="line"> Statistics: Num rows: 2885412 Data size: 376417503 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line"> Select Operator</span><br><span class="line"> expressions: usr_sts_cd (type: string)</span><br><span class="line"> outputColumnNames: usr_sts_cd</span><br><span class="line"> Statistics: Num rows: 2885412 Data size: 376417503 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line"> Group By Operator</span><br><span class="line"> aggregations: count(1)</span><br><span class="line"> keys: usr_sts_cd (type: string)</span><br><span class="line"> mode: hash0 </span><br><span class="line"> outputColumnNames: _col0, _col1</span><br><span class="line"> Statistics: Num rows: 2885412 Data size: 376417503 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line"> Reduce Output Operator</span><br><span class="line"> key expressions: _col0 (type: string)</span><br><span class="line"> sort order: +</span><br><span class="line">  Map-reduce partition columns: _col0 (type: string)</span><br><span class="line"> Statistics: Num rows: 2885412 Data size: 376417503 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line"> value expressions: _col1 (type: bigint)</span><br><span class="line"> Reduce Operator Tree:</span><br><span class="line"> Group By Operator</span><br><span class="line"> aggregations: count(VALUE._col0)</span><br><span class="line"> keys: KEY._col0 (type: string)</span><br><span class="line"> mode: mergepartial</span><br><span class="line"> outputColumnNames: _col0, _col1</span><br><span class="line"> Statistics: Num rows: 1442706 Data size: 188208751 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line"> Select Operator</span><br><span class="line"> expressions: _col0 (type: string), _col1 (type: bigint)</span><br><span class="line"> outputColumnNames: _col0, _col1</span><br><span class="line"> Statistics: Num rows: 1442706 Data size: 188208751 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line"> File Output Operator</span><br><span class="line"> compressed: false</span><br><span class="line"> Statistics: Num rows: 1442706 Data size: 188208751 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line"> table:</span><br><span class="line"> input format: org.apache.hadoop.mapred.TextInputFormat</span><br><span class="line"> output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat</span><br><span class="line"> serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe</span><br><span class="line"> </span><br><span class="line"> Stage: Stage-0</span><br><span class="line"> Fetch Operator</span><br><span class="line"> limit: -1</span><br><span class="line"> Processor Tree:</span><br><span class="line"> ListSink</span><br></pre></td></tr></table></figure>

<h2 id="MapReduce实际执行实例"><a href="#MapReduce实际执行实例" class="headerlink" title="MapReduce实际执行实例"></a>MapReduce实际执行实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query ID = dwjixincheng_20210811151212_94f4d43b-b45b-417f-8e61-86fd1e99fcea</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks not specified. Estimated from input data size: 17</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line"> set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line"> set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line"> set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Starting Job = job_1622444551352_8842, Tracking URL = http://stbdhadoop-3001.site:8088/proxy/application_1622444551352_8842/</span><br><span class="line">Kill Command = /home/hadoop/hadoop-2.6.0-cdh5.4.0/bin/hadoop job -kill job_1622444551352_8842</span><br><span class="line">Hadoop job information for Stage-1: number of mappers: 5; number of reducers: 17</span><br><span class="line">2021-08-11 15:13:00,870 Stage-1 map = 0%, reduce = 0%</span><br><span class="line">2021-08-11 15:13:09,594 Stage-1 map = 20%, reduce = 0%, Cumulative CPU 4.8 sec</span><br><span class="line">2021-08-11 15:13:11,648 Stage-1 map = 40%, reduce = 0%, Cumulative CPU 7.87 sec</span><br><span class="line">2021-08-11 15:13:13,702 Stage-1 map = 60%, reduce = 0%, Cumulative CPU 12.57 sec</span><br><span class="line">2021-08-11 15:13:14,728 Stage-1 map = 80%, reduce = 0%, Cumulative CPU 26.22 sec</span><br><span class="line">2021-08-11 15:13:17,805 Stage-1 map = 100%, reduce = 0%, Cumulative CPU 37.35 sec</span><br><span class="line">2021-08-11 15:13:19,862 Stage-1 map = 100%, reduce = 53%, Cumulative CPU 49.57 sec</span><br><span class="line">2021-08-11 15:13:20,892 Stage-1 map = 100%, reduce = 65%, Cumulative CPU 52.35 sec</span><br><span class="line">2021-08-11 15:13:22,957 Stage-1 map = 100%, reduce = 71%, Cumulative CPU 54.12 sec</span><br><span class="line">2021-08-11 15:13:23,989 Stage-1 map = 100%, reduce = 82%, Cumulative CPU 57.66 sec</span><br><span class="line">2021-08-11 15:13:25,020 Stage-1 map = 100%, reduce = 88%, Cumulative CPU 59.41 sec</span><br><span class="line">2021-08-11 15:13:27,065 Stage-1 map = 100%, reduce = 100%, Cumulative CPU 62.81 sec</span><br><span class="line">MapReduce Total cumulative CPU time: 1 minutes 2 seconds 810 msec</span><br><span class="line">Ended Job = job_1622444551352_8842</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1: Map: 5 Reduce: 17 Cumulative CPU: 62.81 sec HDFS Read: 1138329113 HDFS Write: 0 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 1 minutes 2 seconds 810 msec</span><br><span class="line">OK</span><br><span class="line">Time taken: 33.815 seconds</span><br></pre></td></tr></table></figure>

<h1 id="6-Hive数据处理模式"><a href="#6-Hive数据处理模式" class="headerlink" title="6 Hive数据处理模式"></a>6 Hive数据处理模式</h1><h2 id="3种数据处理模式"><a href="#3种数据处理模式" class="headerlink" title="3种数据处理模式"></a>3种数据处理模式</h2><ul>
<li><p>过滤模式</p>
</li>
<li><p>聚合模式</p>
</li>
<li><p>连接模式</p>
</li>
</ul>
<h2 id="常用set变量设置"><a href="#常用set变量设置" class="headerlink" title="常用set变量设置"></a>常用set变量设置</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--select显示列名</span></span><br><span class="line"><span class="keyword">SET</span> hive.cli.print.header<span class="operator">=</span><span class="literal">true</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">--会话显示当前数据库 </span></span><br><span class="line"><span class="keyword">SET</span> hive.cli.print.current.db<span class="operator">=</span><span class="literal">true</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">--动态分区插入</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition<span class="operator">=</span><span class="literal">true</span>; <span class="comment">--开启动态分区</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition.mode<span class="operator">=</span>nonstrict; <span class="comment">--允许所有分区动态</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.max.dynamic.partitions<span class="operator">=</span><span class="number">10000</span>; <span class="comment">--每个语句可以创建的最大分区数 </span></span><br><span class="line"><span class="keyword">set</span> hive.exec.max.dynamic.partitions.pernode<span class="operator">=</span><span class="number">1000</span>; <span class="comment">--每个mapreduce任务节点可以创建的最大分区数</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">--使用spark引擎</span></span><br><span class="line"><span class="keyword">set</span> hive.execution.engine<span class="operator">=</span>spark;</span><br><span class="line"><span class="keyword">set</span> spark.eventLog.enabled<span class="operator">=</span><span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--并行执行</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.parallel<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.exec.parallel.thread.number<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--提高聚集：Map端聚合，相当于combiner</span></span><br><span class="line"><span class="keyword">set</span> hive.map.aggr<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--数据倾斜：为倾斜数据创建单独计划</span></span><br><span class="line"><span class="keyword">set</span> hive.optimize.skewjoin<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<h2 id="union-all改成多次insert"><a href="#union-all改成多次insert" class="headerlink" title="union all改成多次insert"></a>union all改成多次insert</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> tmp_cch_20210803_001 ;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tmp_cch_20210803_001 <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> start_dt,<span class="built_in">max</span>(usr_nbr) usr_nbr,<span class="string">&#x27;max&#x27;</span> type</span><br><span class="line"><span class="keyword">from</span> biee.tb_d_userinfo a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> start_dt</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> start_dt,<span class="built_in">min</span>(usr_nbr) usr_nbr,<span class="string">&#x27;min&#x27;</span> type</span><br><span class="line"><span class="keyword">from</span> biee.tb_d_userinfo a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> start_dt</span><br><span class="line">;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--多次insert</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> tmp_cch_20210803_001 ;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tmp_cch_20210803_001 </span><br><span class="line">(start_dt string</span><br><span class="line">, usr_nbr string</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (type string);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition<span class="operator">=</span><span class="literal">true</span>; </span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition.mode<span class="operator">=</span>nonstrict; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> biee.tb_d_userinfo</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> tmp_cch_20210803_001 <span class="keyword">partition</span>(type)</span><br><span class="line"><span class="keyword">select</span> start_dt,<span class="built_in">max</span>(usr_nbr) usr_nbr,<span class="string">&#x27;max&#x27;</span> type</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> start_dt</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> tmp_cch_20210803_001 <span class="keyword">partition</span>(type)</span><br><span class="line"><span class="keyword">select</span> start_dt,<span class="built_in">min</span>(usr_nbr) usr_nbr,<span class="string">&#x27;min&#x27;</span> type</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> start_dt</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h2 id="空值连接"><a href="#空值连接" class="headerlink" title="空值连接"></a>空值连接</h2><p>防止数据倾斜，空值替换为随机数，分散到多个reduce连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.usr_id</span><br><span class="line"> ,a.usr_nbr</span><br><span class="line"> ,b.vest_lvl1_cd</span><br><span class="line"><span class="keyword">from</span> tmp_cch_20210813_001 a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> eds.TW_GMCC_USR_VEST_MO_201806 b <span class="keyword">on</span> nvl(a.usr_nbr2,concat(<span class="string">&#x27;空&#x27;</span>,rand()))<span class="operator">=</span>b.usr_nbr</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hive学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>hive</tag>
        <tag>大数据</tag>
        <tag>调优</tag>
      </tags>
  </entry>
  <entry>
    <title>Namesilo域名购买及使用教程</title>
    <url>/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Namesilo-域名购买及使用教程"><a href="#Namesilo-域名购买及使用教程" class="headerlink" title="Namesilo 域名购买及使用教程"></a>Namesilo 域名购买及使用教程</h1><h2 id="账户注册"><a href="#账户注册" class="headerlink" title="账户注册"></a>账户注册</h2><p>进入 <a href="https://link.zhihu.com/?target=https://www.namesilo.com/?rid=d27fa32do" title="Namesilo">Namesilo</a> ，点击右上角 <strong>“Create New Account”</strong> 注册账号。</p>
<ul>
<li>为必填内容，建议如实填写；勾选 “Keep my information private” 默认使用隐私保护，保护我们的注册信息。</li>
</ul>
<p><img src="/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image__KU5x3Ku-H.png" alt="image__KU5x3Ku-H"></p>
<p>最后输入验证码，<strong>“Create New Account”</strong>，会收到验证邮件，点击链接激活完成注册。</p>
<p><img src="/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image_vROy7_A0Di.png" alt="image_vROy7_A0Di"></p>
<h2 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h2><p>激活账户并登陆，进入主页，在搜索框中输入想要注册的域名，<strong>“SEARCH”</strong>。</p>
<p><img src="/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image_xB1tcWHNkj.png" alt="image_xB1tcWHNkj"></p>
<p>勾选需要的域名后缀，<strong>“REGISTER”</strong>。如果该域名已被注册，会显示为橙色的 “Registered” 状态，绿色表示可注册。</p>
<p><img src="/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image_VrIwkCV3K7.png" alt="image_VrIwkCV3K7"></p>
<p>确认订单，设置域名续费规则、注册时长等。在 “Have a Coupon……” 处输入优惠码 <code>okoff</code> 或者 <code>go2think</code> ，点击 “Submit”应用，优惠一美元。</p>
<p>完成后点击 <strong>“CONTINUE”</strong> 进入下一步。</p>
<p><img src="/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image_nGlybwXLN1.png" alt="image_nGlybwXLN1"></p>
<p><img src="/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image_3YK8Ushr3s.png" alt="image_3YK8Ushr3s"></p>
<p><strong>其中：</strong></p>
<ul>
<li>NameServers：域名解析服务器设置，未确定的可以等稍后在后台设置也一样；</li>
<li>Auto-Renew：自动续费，如果决定长期使用，可以选择 Yes；</li>
<li>Privacy Setting：隐私保护，选择 “WHOIS Privacy”；</li>
<li>Set all years to：注册时长，如果是活动价格，则只能选择一年。</li>
</ul>
<h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>付款。支持支付宝、Paypal 等。支付宝付款：在右侧输入框填写支付宝绑定的邮箱，点击 <strong>“GO”</strong> 跳转扫码界面支付。</p>
<p><img src="/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image_bs3cg892At.png" alt="image_bs3cg892At"></p>
<h2 id="域名解析-x2F-设置DNS服务器"><a href="#域名解析-x2F-设置DNS服务器" class="headerlink" title="域名解析 &#x2F; 设置DNS服务器"></a>域名解析 &#x2F; 设置DNS服务器</h2><p>域名注册购买成功后，我们就可以把域名解析到服务器了。</p>
<p>这里我们可以直接使用 Namesilo 解析域名；也可以使用其它解析服务，然后更改 DNS 服务器地址。</p>
<p><img src="/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image_hdmcbrnIiA.png" alt="image_hdmcbrnIiA"></p>
<h2 id="方法二：更改-DNS-服务器地址"><a href="#方法二：更改-DNS-服务器地址" class="headerlink" title="方法二：更改 DNS 服务器地址"></a>方法二：更改 DNS 服务器地址</h2><p>如果使用的其他服务商提供的解析服务，选择 <strong>“Change Nameservers”</strong> 更改域名服务器地址。</p>
<p><img src="/2023/09/05/Namesilo%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image_hsm_s_rQUm.png" alt="image_hsm_s_rQUm"></p>
<p>至此，已经完成了域名的注册和解析，如果网站已经搭建好了，等待解析生效后，就可以访问自己的网站了！</p>
<p>参考链接：<a href="https://zhuanlan.zhihu.com/p/33921436" title="https://zhuanlan.zhihu.com/p/33921436">https://zhuanlan.zhihu.com/p/33921436</a></p>
]]></content>
      <categories>
        <category>网站搭建-hexo</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题分页的翻页箭头显示&lt;i class=fafa-angle-right&gt;&lt;/i&gt;</title>
    <url>/2023/11/19/NexT%E4%B8%BB%E9%A2%98%E5%88%86%E9%A1%B5%E7%9A%84%E7%BF%BB%E9%A1%B5%E7%AE%AD%E5%A4%B4%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>显示为:</p>
<p><img src="/2023/11/19/NexT%E4%B8%BB%E9%A2%98%E5%88%86%E9%A1%B5%E7%9A%84%E7%BF%BB%E9%A1%B5%E7%AE%AD%E5%A4%B4%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF/image-20231119154030584.png" alt="image-20231119154030584"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改代码的位置:<code>themes\next\layout\_partials\pagination.swig</code></p>
<p>原来为:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> page.<span class="property">prev</span> or page.<span class="property">next</span> %&#125;</span><br><span class="line">  &lt;nav <span class="keyword">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      <span class="title function_">paginator</span>(&#123;</span><br><span class="line">        <span class="attr">prev_text</span>: <span class="string">&#x27;&lt;i class=&quot;fa fa-angle-left&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class="line">        <span class="attr">next_text</span>: <span class="string">&#x27;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class="line">        <span class="attr">mid_size</span>: <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>修改为:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> page.<span class="property">prev</span> or page.<span class="property">next</span> %&#125;</span><br><span class="line">  &lt;nav <span class="keyword">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      <span class="title function_">paginator</span>(&#123;</span><br><span class="line">        <span class="attr">prev_text</span>: <span class="string">&#x27;&lt;&#x27;</span>,</span><br><span class="line">        <span class="attr">next_text</span>: <span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">        <span class="attr">mid_size</span>: <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网站搭建-hexo</category>
      </categories>
      <tags>
        <tag>错误记录</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置-站点内容搜索</title>
    <url>/2023/07/23/hexo%E9%85%8D%E7%BD%AE-%E7%AB%99%E7%82%B9%E5%86%85%E5%AE%B9%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="安装-hexo-generator-searchdb"><a href="#安装-hexo-generator-searchdb" class="headerlink" title="安装 hexo-generator-searchdb"></a>安装 hexo-generator-searchdb</h1><p>在站点的根目录下执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h1 id="编辑-站点配置文件，新增以下内容到任意位置："><a href="#编辑-站点配置文件，新增以下内容到任意位置：" class="headerlink" title="编辑 站点配置文件，新增以下内容到任意位置："></a>编辑 站点配置文件，新增以下内容到任意位置：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>编辑 主题配置文件，启用本地搜索功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<p>请注意：主题为：next</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://theme-next.iissnan.com/third-party-services.html#local-search">http://theme-next.iissnan.com/third-party-services.html#local-search</a></p>
]]></content>
      <categories>
        <category>网站搭建-hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，这是我的首页。</title>
    <url>/2023/04/27/hello-world/</url>
    <content><![CDATA[<p>欢迎来到我的博客，这是我的第一篇文章，本网站用于记录本人成长的历程，分享我的学习经历，感谢您百忙之中进入我的博客，欢迎您的批评和指正。</p>
]]></content>
  </entry>
  <entry>
    <title>httpx命令记录学习</title>
    <url>/2023/11/19/httpx%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">INPUT:</span><br><span class="line">   -l, -list string      包含要处理的主机列表的输入文件</span><br><span class="line">   -rr, -request string  包含原始请求的文件</span><br><span class="line">   -u, -target string[]  输入要探测的目标主机</span><br><span class="line"></span><br><span class="line">PROBES:</span><br><span class="line">   -sc, -status-code     显示响应状态码</span><br><span class="line">   -cl, -content-length  显示响应内容长度</span><br><span class="line">   -ct, -content-type    显示响应内容类型</span><br><span class="line">   -location             显示响应重定向位置</span><br><span class="line">   -favicon              显示&#x27;/favicon.ico&#x27;文件的mmh3散列</span><br><span class="line">   -hash string          显示响应体哈希值(支持md5,mmh3,simhash,sha1,sha256,sha512)</span><br><span class="line">   -jarm                 显示告警指纹散列</span><br><span class="line">   -rt, -response-time   显示响应时间</span><br><span class="line">   -lc, -line-count      显示响应体行计数</span><br><span class="line">   -wc, -word-count      显示回复正文字数</span><br><span class="line">   -title                显示页面标题</span><br><span class="line">   -server, -web-server  显示服务器名称</span><br><span class="line">   -td, -tech-detect     基于wappalyzer数据集的显示技术</span><br><span class="line">   -method               显示HTTP请求方法</span><br><span class="line">   -websocket            使用websocket显示服务器</span><br><span class="line">   -ip                   显示主机IP</span><br><span class="line">   -cname                显示主机cname</span><br><span class="line">   -asn                  显示主机asn信息</span><br><span class="line">   -cdn                  显示正在使用的CDN</span><br><span class="line">   -probe                显示探针状态</span><br><span class="line"></span><br><span class="line">HEADLESS:</span><br><span class="line">   -ss, -screenshot  启用使用无头浏览器保存页面截图</span><br><span class="line">   -system-chrome    启用使用本地安装的chrome屏幕截图</span><br><span class="line"></span><br><span class="line">MATCHERS:</span><br><span class="line">   -mc, -match-code string            匹配响应与指定的状态码(-mc 200,302)</span><br><span class="line">   -ml, -match-length string          匹配响应与指定的内容长度(-ml 100,102)</span><br><span class="line">   -mlc, -match-line-count string     匹配响应体与指定的行数(-mlc 423,532)</span><br><span class="line">   -mwc, -match-word-count string     匹配响应体与指定字数(-mwc 43,55)</span><br><span class="line">   -mfc, -match-favicon string[]      匹配响应与指定的图标哈希(-mfc 1494302000)</span><br><span class="line">   -ms, -match-string string          匹配响应与指定字符串(-ms admin)</span><br><span class="line">   -mr, -match-regex string           用指定的正则表达式匹配响应(-mr admin)</span><br><span class="line">   -mcdn, -match-cdn string[]         匹配主机与指定的CDN提供商(cloudfront, fastly，谷歌，leaseweb, stackpath)</span><br><span class="line">   -mrt, -match-response-time string  匹配响应与指定的响应时间(以秒为单位)(-mrt &#x27;&lt; 1&#x27;)</span><br><span class="line">   -mdc, -match-condition string      匹配响应与DSL表达式条件</span><br><span class="line"></span><br><span class="line">EXTRACTOR:</span><br><span class="line">   -er, -extract-regex string[]   用匹配的正则表达式显示响应内容</span><br><span class="line">   -ep, -extract-preset string[]  显示与预定义正则表达式(url,ipv4,mail)匹配的响应内容</span><br><span class="line"></span><br><span class="line">FILTERS:</span><br><span class="line">   -fc, -filter-code string            使用指定状态码筛选响应(-fc 403,401)</span><br><span class="line">   -fep, -filter-error-page            使用基于ML的错误页面检测过滤响应</span><br><span class="line">   -fl, -filter-length string          具有指定内容长度的过滤器响应(-fl 23,33)</span><br><span class="line">   -flc, -filter-line-count string     具有指定行数的过滤器响应体(-flc 423,532)</span><br><span class="line">   -fwc, -filter-word-count string     过滤具有指定字数的响应体(-fwc 423,532)</span><br><span class="line">   -ffc, -filter-favicon string[]      使用指定的favicon哈希过滤响应(-mfc 1494302000)</span><br><span class="line">   -fs, -filter-string string          使用指定字符串过滤响应(-fs admin)</span><br><span class="line">   -fe, -filter-regex string           使用指定的正则表达式过滤响应(-fe admin)</span><br><span class="line">   -fcdn, -filter-cdn string[]         过滤主机与指定的CDN提供商(cloudfront, fastly，谷歌，leaseweb, stackpath)</span><br><span class="line">   -frt, -filter-response-time string  过滤具有指定响应时间(以秒为单位)的响应(- first &#x27;&gt; 1&#x27;)</span><br><span class="line">   -fdc, -filter-condition string      带DSL表达式条件的过滤响应</span><br><span class="line"></span><br><span class="line">RATE-LIMIT:</span><br><span class="line">   -t, -threads int              要使用的线程数(默认为50)</span><br><span class="line">   -rl, -rate-limit int          每秒发送的最大请求数(默认150)</span><br><span class="line">   -rlm, -rate-limit-minute int  每分钟发送的最大请求数</span><br><span class="line"></span><br><span class="line">MISCELLANEOUS:</span><br><span class="line">   -pa, -probe-all-ips        探测与同一主机关联的所有ip</span><br><span class="line">   -p, -ports string[]        要探测的端口(nmap语法:例如http:1,2-10,11,https:80)</span><br><span class="line">   -path string               要探测的路径或路径列表(逗号分隔，文件)</span><br><span class="line">   -tls-probe                 在提取的TLS域(dns_name)上发送http探测</span><br><span class="line">   -csp-probe                 在提取的CSP域上发送http探测</span><br><span class="line">   -tls-grab                  执行TLS(SSL)数据抓取</span><br><span class="line">   -pipeline                  支持HTTP1.1管道的探测和显示服务器</span><br><span class="line">   -http2                     支持HTTP2的探测和显示服务器</span><br><span class="line">   -vhost                     支持VHOST的探测和显示服务器</span><br><span class="line">   -ldv, -list-dsl-variables  列出json输出字段的关键字名称，支持DSL匹配器/过滤器</span><br><span class="line"></span><br><span class="line">UPDATE:</span><br><span class="line">   -up, -update                 更新HTTPX到最新版本</span><br><span class="line">   -duc, -disable-update-check  禁用自动检查HTTPX更新</span><br><span class="line"></span><br><span class="line">OUTPUT:</span><br><span class="line">   -o, -output string                  文件写入输出结果</span><br><span class="line">   -oa, -output-all                    以所有格式写入输出结果的文件名</span><br><span class="line">   -sr, -store-response                将HTTP响应存储到输出目录</span><br><span class="line">   -srd, -store-response-dir string    将 http 响应存储到自定义目录</span><br><span class="line">   -csv                                以 csv 格式存储输出</span><br><span class="line">   -csvo, -csv-output-encoding string  定义输出编码</span><br><span class="line">   -json                               以 jsonl ines 格式存储输出</span><br><span class="line">   -irr, -include-response             仅在 json 输出 json 中包含 http 请求响应</span><br><span class="line">   -irrb, -include-response-base64     仅在 json 输出 json 中包含 Base 64 编码的 http 请求响应</span><br><span class="line">   -include-chain                      仅在 json 输出 json 中包含重定向 http 链</span><br><span class="line">   -store-chain                        仅在响应 sr 中包含 http 重定向链</span><br><span class="line"></span><br><span class="line">配置:</span><br><span class="line">   -config string                httpx 配置文件的路径  (default $HOME/.config/httpx/config.yaml)</span><br><span class="line">   -r, -resolvers string[]       自定义解析器文件列表或逗号分隔</span><br><span class="line">   -allow string[]               允许处理的IP/CIDR列表(文件或逗号分隔)</span><br><span class="line">   -deny string[]                拒绝处理的IP/CIDR列表(文件或逗号分隔)</span><br><span class="line">   -sni, -sni-name string        自定义TLS SNI名称</span><br><span class="line">   -random-agent                 启用随机用户代理使用(默认为true)</span><br><span class="line">   -H, -header string[]          自定义HTTP头与请求一起发送</span><br><span class="line">   -http-proxy, -proxy string    要使用的HTTP代理(例如http://127.0.0.1:8080)</span><br><span class="line">   -unsafe                       发送原始请求跳过 golang 规范化</span><br><span class="line">   -resume                       使用Resume .cfg扫描简历</span><br><span class="line">   -fr, -follow-redirects        遵循 http 重定向</span><br><span class="line">   -maxr, -max-redirects int     每个主机遵循的最大重定向数默认为 10</span><br><span class="line">   -fhr, -follow-host-redirects  遵循同一主机上的重定向</span><br><span class="line">   -vhost-input                  获取虚拟主机列表作为输入</span><br><span class="line">   -x string                     探测的请求方法使用 all 来探测所有 http 方法</span><br><span class="line">   -body string                  发布正文以包含在 http 请求中</span><br><span class="line">   -s, -stream                   流模式开始阐述输入目标而不进行排序</span><br><span class="line">   -sd, -skip-dedupe             禁用仅与流模式一起使用的重复数据删除输入项</span><br><span class="line">   -ldp, -leave-default-ports    在主机标头中保留默认的 http https 端口，例如 http 主机 80 https 主机 443</span><br><span class="line">   -ztls                         使用 ztls 库并自动回退到 tls 13 的标准库</span><br><span class="line">   -no-decode                    避免解码主体</span><br><span class="line">   -tlsi, -tls-impersonate       启用实验性客户端 hello ja 3 tls 随机化</span><br><span class="line">   -no-stdin                     禁用标准输入处理</span><br><span class="line"></span><br><span class="line">DEBUG:</span><br><span class="line">   -health-check, -hc        运行诊断检查</span><br><span class="line">   -debug                    在cli中显示请求响应内容</span><br><span class="line">   -debug-req                在cli中显示请求内容</span><br><span class="line">   -debug-resp               在cli中显示响应内容</span><br><span class="line">   -version                  显示httpx版本</span><br><span class="line">   -stats                    显示扫描统计</span><br><span class="line">   -profile-mem string       可选的 httpx 内存配置文件转储文件</span><br><span class="line">   -silent                   静音模式</span><br><span class="line">   -v, -verbose              详细模式</span><br><span class="line">   -si, -stats-interval int  显示统计信息更新之间等待的秒数 默认 5</span><br><span class="line">   -nc, -no-color            禁用 cli 输出中的颜色</span><br><span class="line"></span><br><span class="line">OPTIMIZATIONS:</span><br><span class="line">   -nf, -no-fallback                  显示探测到的协议 https 和 http</span><br><span class="line">   -nfs, -no-fallback-scheme          使用输入中指定的协议方案进行探测</span><br><span class="line">   -maxhr, -max-host-error int        跳过剩余路径之前每个主机的最大错误计数 默认 30</span><br><span class="line">   -ec, -exclude-cdn                  跳过 cd ns 的全端口扫描 仅检查 80 443</span><br><span class="line">   -retries int                       重试次数</span><br><span class="line">   -timeout int                       超时时间（以秒为单位）默认 10</span><br><span class="line">   -delay value                       每个 http 请求之间的持续时间 例如 200 ms 1 s 默认 1 ns</span><br><span class="line">   -rsts, -response-size-to-save int  要保存的最大响应大小（以字节为单位）默认 2147483647</span><br><span class="line">   -rstr, -response-size-to-read int  读取的最大响应大小（以字节为单位）默认 2147483647</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>httpx</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github page搭建自己的个人博客-笔记01</title>
    <url>/2023/04/27/page%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E7%AC%94%E8%AE%B001/</url>
    <content><![CDATA[<h1 id="Hexo使用方法"><a href="#Hexo使用方法" class="headerlink" title="Hexo使用方法"></a>Hexo使用方法</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p><a href="https://hexo.io/zh-cn/docs/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>将生成的静态网页托管的github中形成属于自己的个人博客</p>
<h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><h3 id="安装-Hexo-相当简单，只需要先安装下列应用程序即可："><a href="#安装-Hexo-相当简单，只需要先安装下列应用程序即可：" class="headerlink" title="安装 Hexo 相当简单，只需要先安装下列应用程序即可："></a>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</h3><ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="进阶安装和使用"><a href="#进阶安装和使用" class="headerlink" title="进阶安装和使用"></a>进阶安装和使用</h3><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>

<p>安装以后，可以使用以下两种方式执行 Hexo：</p>
<ol>
<li><p><code>npx hexo &lt;command&gt;</code></p>
</li>
<li><p>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Node-js-版本限制"><a href="#Node-js-版本限制" class="headerlink" title="Node.js 版本限制"></a>Node.js 版本限制</h3><table>
<thead>
<tr>
<th align="left">Hexo 版本</th>
<th align="left">最低版本 (Node.js 版本)</th>
<th align="left">最高版本 (Node.js 版本)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">6.2+</td>
<td align="left">12.13.0</td>
<td align="left">latest</td>
</tr>
<tr>
<td align="left">6.0+</td>
<td align="left">12.13.0</td>
<td align="left">18.5.0</td>
</tr>
<tr>
<td align="left">5.0+</td>
<td align="left">10.13.0</td>
<td align="left">12.0.0</td>
</tr>
<tr>
<td align="left">4.1 - 4.2</td>
<td align="left">8.10</td>
<td align="left">10.0.0</td>
</tr>
<tr>
<td align="left">4.0</td>
<td align="left">8.6</td>
<td align="left">8.10.0</td>
</tr>
<tr>
<td align="left">3.3 - 3.9</td>
<td align="left">6.9</td>
<td align="left">8.0.0</td>
</tr>
<tr>
<td align="left">3.2 - 3.3</td>
<td align="left">0.12</td>
<td align="left">未知</td>
</tr>
<tr>
<td align="left">3.0 - 3.1</td>
<td align="left">0.10 或 iojs</td>
<td align="left">未知</td>
</tr>
<tr>
<td align="left">0.0.1 - 2.8</td>
<td align="left">0.10</td>
<td align="left">未知</td>
</tr>
</tbody></table>
<h2 id="2、初始化以及相关配置文件解释"><a href="#2、初始化以及相关配置文件解释" class="headerlink" title="2、初始化以及相关配置文件解释"></a>2、初始化以及相关配置文件解释</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold&#x2F;post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p>
<h2 id="3、相关的配置"><a href="#3、相关的配置" class="headerlink" title="3、相关的配置"></a>3、相关的配置</h2><p>在 <code>_config.yml</code> 中修改大部分的配置</p>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>title</code></td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="left"><code>subtitle</code></td>
<td align="left">网站副标题</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="left"><code>keywords</code></td>
<td align="left">网站的关键词。支持多个关键词。</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">您的名字</td>
</tr>
<tr>
<td align="left"><code>language</code></td>
<td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td align="left"><code>timezone</code></td>
<td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p>
<h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>url</code></td>
<td align="left">网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>root</code></td>
<td align="left">网站根目录</td>
<td align="left"><code>url&#39;s pathname</code></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td>
<td align="left"><code>:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td align="left"><code>permalink_defaults</code></td>
<td align="left">永久链接中各部分的默认值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>pretty_urls</code></td>
<td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>pretty_urls.trailing_index</code></td>
<td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>pretty_urls.trailing_html</code></td>
<td align="left">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td>
<td align="left"><code>true</code></td>
</tr>
</tbody></table>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><table>
<thead>
<tr>
<th align="left"></th>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">参数</td>
<td align="left">描述</td>
<td align="left">默认值</td>
</tr>
<tr>
<td align="left"><code>source_dir</code></td>
<td align="left">资源文件夹，这个文件夹用来存放内容。</td>
<td align="left"><code>source</code></td>
</tr>
<tr>
<td align="left"><code>public_dir</code></td>
<td align="left">公共文件夹，这个文件夹用于存放生成的站点文件。</td>
<td align="left"><code>public</code></td>
</tr>
<tr>
<td align="left"><code>tag_dir</code></td>
<td align="left">标签文件夹</td>
<td align="left"><code>tags</code></td>
</tr>
<tr>
<td align="left"><code>archive_dir</code></td>
<td align="left">归档文件夹</td>
<td align="left"><code>archives</code></td>
</tr>
<tr>
<td align="left"><code>category_dir</code></td>
<td align="left">分类文件夹</td>
<td align="left"><code>categories</code></td>
</tr>
<tr>
<td align="left"><code>code_dir</code></td>
<td align="left">Include code 文件夹，<code>source_dir</code> 下的子目录</td>
<td align="left"><code>downloads/code</code></td>
</tr>
<tr>
<td align="left"><code>i18n_dir</code></td>
<td align="left">国际化（i18n）文件夹</td>
<td align="left"><code>:lang</code></td>
</tr>
<tr>
<td align="left"><code>skip_render</code></td>
<td align="left">跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>其他详细的配置请参考<a href="https://hexo.io/zh-cn/docs/configuration#%E7%9B%AE%E5%BD%95">官网</a></p>
<h2 id="4、指令"><a href="#4、指令" class="headerlink" title="4、指令"></a>4、指令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>

<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--path</code></td>
<td align="left">自定义新文章的路径</td>
</tr>
<tr>
<td align="left"><code>-r</code>, <code>--replace</code></td>
<td align="left">如果存在同名文章，将其替换</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--slug</code></td>
<td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page --path about/me &quot;About me&quot;</span><br></pre></td></tr></table></figure>

<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>
<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>, <code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td align="left"><code>-b</code>, <code>--bail</code></td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td align="left"><code>-f</code>, <code>--force</code></td>
<td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>
</tr>
<tr>
<td align="left"><code>-c</code>, <code>--concurrency</code></td>
<td align="left">最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>发表草稿。</p>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>, <code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>

<p>渲染文件。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-o</code>, <code>--output</code></td>
<td align="left">设置输出路径</td>
</tr>
</tbody></table>
<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>

<p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>

<p>列出网站资料。</p>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>

<p>显示 Hexo 版本。</p>
<h2 id="5、写作"><a href="#5、写作" class="headerlink" title="5、写作"></a>5、写作</h2><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>
<h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>
<table>
<thead>
<tr>
<th align="left">布局</th>
<th align="left">路径</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>post</code></td>
<td align="left"><code>source/_posts</code></td>
</tr>
<tr>
<td align="left"><code>page</code></td>
<td align="left"><code>source</code></td>
</tr>
<tr>
<td align="left"><code>draft</code></td>
<td align="left"><code>source/_drafts</code></td>
</tr>
</tbody></table>
<h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>
<table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>:title</code></td>
<td align="left">标题（小写，空格将会被替换为短杠）</td>
</tr>
<tr>
<td align="left"><code>:year</code></td>
<td align="left">建立的年份，比如， <code>2015</code></td>
</tr>
<tr>
<td align="left"><code>:month</code></td>
<td align="left">建立的月份（有前导零），比如， <code>04</code></td>
</tr>
<tr>
<td align="left"><code>:i_month</code></td>
<td align="left">建立的月份（无前导零），比如， <code>4</code></td>
</tr>
<tr>
<td align="left"><code>:day</code></td>
<td align="left">建立的日期（有前导零），比如， <code>07</code></td>
</tr>
<tr>
<td align="left"><code>:i_day</code></td>
<td align="left">建立的日期（无前导零），比如， <code>7</code></td>
</tr>
</tbody></table>
<h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>
<h3 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h3><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure>

<p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>
<table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>layout</code></td>
<td align="left">布局</td>
</tr>
<tr>
<td align="left"><code>title</code></td>
<td align="left">标题</td>
</tr>
<tr>
<td align="left"><code>date</code></td>
<td align="left">文件建立日期</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>网站搭建-hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>python进度条</title>
    <url>/2023/07/28/python%E8%BF%9B%E5%BA%A6%E6%9D%A1-alive-progress/</url>
    <content><![CDATA[<h1 id="python进度条"><a href="#python进度条" class="headerlink" title="python进度条"></a>python进度条</h1><h3 id="一、普通进度条"><a href="#一、普通进度条" class="headerlink" title="一、普通进度条"></a>一、普通进度条</h3><p><strong>示例代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress_bar</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Download progress: &#123;&#125;%: &quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;▋&quot;</span> * (i // <span class="number">2</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    progress_bar()</span><br></pre></td></tr></table></figure>

<h3 id="二、带时间的进度条"><a href="#二、带时间的进度条" class="headerlink" title="二、带时间的进度条"></a>二、带时间的进度条</h3><p>导入time模块来计算代码运行的时间，加上代码迭代进度使用格式化字符串来输出代码运行进度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">scale = <span class="number">50</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;执行开始，祈祷不报错&quot;</span>.center(scale // <span class="number">2</span>,<span class="string">&quot;-&quot;</span>))</span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(scale + <span class="number">1</span>):</span><br><span class="line">    a = <span class="string">&quot;*&quot;</span> * i</span><br><span class="line">    b = <span class="string">&quot;.&quot;</span> * (scale - i)</span><br><span class="line">    c = (i / scale) * <span class="number">100</span></span><br><span class="line">    dur = time.perf_counter() - start</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;</span>.<span class="built_in">format</span>(c,a,b,dur),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;执行结束，万幸&quot;</span>.center(scale // <span class="number">2</span>,<span class="string">&quot;-&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="三、TPDM-进度条"><a href="#三、TPDM-进度条" class="headerlink" title="三、TPDM 进度条"></a>三、TPDM 进度条</h3><p>这是一个专门生成进度条的工具包，可以使用pip在终端进行下载，当然还能切换进度条风格</p>
<p><strong>示例代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="comment"># 这里同样的，tqdm就是这个进度条最常用的一个方法</span></span><br><span class="line"><span class="comment"># 里面存一个可迭代对象</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">500</span>)):</span><br><span class="line">   <span class="comment"># 模拟你的任务</span></span><br><span class="line">   sleep(<span class="number">0.01</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="四、progress-进度条"><a href="#四、progress-进度条" class="headerlink" title="四、progress 进度条"></a>四、progress 进度条</h3><p>只需要定义迭代的次数、进度条类型并在每次迭代时告知进度条即可</p>
<p>相关文档：<a href="https://pypi.org/project/progress/1.5/" title="https://pypi.org/project/progress/1.5/"><em>https://pypi.org/project/progress/1.5/</em></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> progress.bar <span class="keyword">import</span> IncrementalBar</span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">bar = IncrementalBar(<span class="string">&#x27;Countdown&#x27;</span>, <span class="built_in">max</span> = <span class="built_in">len</span>(mylist))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> mylist:</span><br><span class="line">    bar.<span class="built_in">next</span>()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    bar.finish()</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://www.cnblogs.com/zhuminghui/p/13985315.html" title="https://www.cnblogs.com/zhuminghui/p/13985315.html">https://www.cnblogs.com/zhuminghui/p/13985315.html</a></p>
]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>poetry 入门完全指南</title>
    <url>/2023/11/12/poetry-%E5%85%A5%E9%97%A8%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="poetry-是什么"><a href="#poetry-是什么" class="headerlink" title="poetry 是什么"></a>poetry 是什么</h1><blockquote>
<p><a href="https://python-poetry.org/">https://python-poetry.org/</a><br>Poetry 差不多是 pip + venv，的结合体。可以类似 pip 用于管理第三方模块的管理，但是比 pip 的功能强大许多，同时还包含 venv 的虚拟环境管理功能。大致的功能如下：</p>
</blockquote>
<ol>
<li>管理第三方模块的安装与卸载</li>
<li>管理虚拟环境</li>
<li>管理虚拟环境的依赖</li>
<li>管理打包与发布 其中最重要的是 虚拟环境的依赖，意识本文的重点。至于 打包与发布 对于开发者用的不是很多，在这里就不介绍了。</li>
</ol>
<h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><p>虚拟环境是指内建的 venv 或 virtualenv 、 conda 以及其他用来创建与管理 Python 虚拟环境的工具，不同的虚拟环境各自独立，存放的位置、安装的模块也都不一样。</p>
<h1 id="模块管理、模块依赖管理"><a href="#模块管理、模块依赖管理" class="headerlink" title="模块管理、模块依赖管理"></a>模块管理、模块依赖管理</h1><p>模块是指虚拟环境中安装的第三方模块及其版本。大多数项目对第三方库的版本都是有特定要求，如果对旧版本的项目使用新版本的依赖，可能会报很奇怪的错误。</p>
<p>当安装第三方模块时，第三方模块可能会安装自己依赖的模块。当安装两个以上模块时，就可能出现第三方模块的依赖出现冲突。这种情况一般是依赖的版本冲突。这种就叫做相关性依赖</p>
<h1 id="pip-的不足"><a href="#pip-的不足" class="headerlink" title="pip 的不足"></a>pip 的不足</h1><p>pip 是 python 内置的依赖管理工具，而它最大的不足在于 第三方模块的相关性依赖管理 的能力不足。尤其是在删除第三方模块是的依赖解析， 可以说是不会分析依赖。这也是我选择 poetry 的一个重要原因。<br>下来我们看一个案例：<br>1、创建虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\code_demo&gt; python -m venv venv</span><br><span class="line">D:\code_demo&gt; venv\Script\active</span><br><span class="line">(venv) D:\code_demo&gt;</span><br></pre></td></tr></table></figure>

<p>2、安装 flask 并查看安装好的第三方模块（依赖）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(venv) D:\code_demo&gt;pip install flask</span><br><span class="line">(venv) D:\code_demo&gt;pip list</span><br><span class="line">Package      Version</span><br><span class="line">------------ -------</span><br><span class="line">blinker      1.6.2</span><br><span class="line">click        8.1.3</span><br><span class="line">colorama     0.4.6</span><br><span class="line">Flask        2.3.2</span><br><span class="line">itsdangerous 2.1.2</span><br><span class="line">Jinja2       3.1.2</span><br><span class="line">MarkupSafe   2.1.2</span><br><span class="line">pip          22.3.1</span><br><span class="line">setuptools   65.5.0</span><br><span class="line">Werkzeug     2.3.6</span><br></pre></td></tr></table></figure>

<p>3、然后删除 flask 模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(venv) D:\code_demo&gt;pip uninstall flask</span><br><span class="line">Found existing installation: Flask 2.3.2</span><br><span class="line">Uninstalling Flask-2.3.2:</span><br><span class="line">  Would remove:</span><br><span class="line">    d:\code_demo\venv\lib\site-packages\flask-2.3.2.dist-info\*</span><br><span class="line">    d:\code_demo\venv\lib\site-packages\flask\*</span><br><span class="line">    d:\code_demo\venv\scripts\flask.exe</span><br><span class="line">Proceed (Y/n)? y</span><br><span class="line">  Successfully uninstalled Flask-2.3.2</span><br><span class="line"></span><br><span class="line">(venv) D:\code_demo&gt;pip list</span><br><span class="line">Package      Version</span><br><span class="line">------------ -------</span><br><span class="line">blinker      1.6.2[pyproject.toml](..%2F..%2F..%2Fpoetry-demo%2Fpyproject.toml)</span><br><span class="line">click        8.1.3</span><br><span class="line">colorama     0.4.6</span><br><span class="line">itsdangerous 2.1.2</span><br><span class="line">Jinja2       3.1.2</span><br><span class="line">MarkupSafe   2.1.2</span><br><span class="line">pip          22.3.1</span><br><span class="line">setuptools   65.5.0</span><br><span class="line">Werkzeug     2.3.6</span><br></pre></td></tr></table></figure>

<p>然后就会发现，只少了 flask 模块，而安装 flask 时顺带安装的依赖全部被留下了。也就是说 pip 安装模块是，相关的依赖都会被下载安装。但是在删除是，pip 就不会进行管理了，而是直接把指定的模块移除，留下一堆依赖。</p>
<h1 id="开始使用-Poetry"><a href="#开始使用-Poetry" class="headerlink" title="开始使用 Poetry"></a>开始使用 Poetry</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install poetry</span><br></pre></td></tr></table></figure>

<h2 id="初始化-poetry-项目"><a href="#初始化-poetry-项目" class="headerlink" title="初始化 poetry 项目"></a>初始化 poetry 项目</h2><p>1、初始化项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">X:\&gt;mkdir poetry-demo</span><br><span class="line">X:\&gt;cd poetry-demo</span><br><span class="line">X:\poetry-demo&gt;poetry init</span><br></pre></td></tr></table></figure>

<p>然后会跳出来一连串的互动对话，用于创建项目的配置文件，这里我就直接全部一路回车，然后看一下生成的 <code>pyproject.toml</code> 配置文件：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.poetry]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;poetry-demo&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;zhengxinonly &lt;pyxxponly@gmail.com&gt;&quot;</span>]</span><br><span class="line"><span class="attr">readme</span> = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"><span class="attr">packages</span> = [&#123;include = <span class="string">&quot;poetry_demo&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">&quot;^3.10&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">&quot;poetry-core&quot;</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">&quot;poetry.core.masonry.api&quot;</span></span><br></pre></td></tr></table></figure>

<p>此时项目的目录接口如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry-demo</span><br><span class="line">└── pyproject.toml</span><br><span class="line"></span><br><span class="line">0 directories, 1 file</span><br></pre></td></tr></table></figure>

<h2 id="管理虚拟环境"><a href="#管理虚拟环境" class="headerlink" title="管理虚拟环境"></a>管理虚拟环境</h2><p>poetry 预设了很多自己的虚拟环境配置，这些配置可以通过 <code>poetry config</code> 进行修改。</p>
<p>Windows 系统下 poetry 预设是将虚拟环境创建在 <code>C:\Users\&lt;用户名&gt;\AppData\Local\pypoetry\Cache\virtualenvs</code> 目录下，当用户在执行 <code>poetry add</code> 等指令时，poetry 都会自动检查当下是否正在使用虚拟环境：</p>
<ul>
<li>如果是，则会直接安装模块到当前的虚拟环境下</li>
<li>如果否，则会自动帮你创建一个新的虚拟环境，然后再安装模块</li>
</ul>
<blockquote>
<p>如果之前使用过 venv 、 virtualenv 或者其他的虚拟环境，poetry 默认的虚拟环境跟他们的有一点不一样，不过后面可以通过 poetry config 修改配置解决这个问题。</p>
</blockquote>
<h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>使用指令 <code>poetry env use python</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">X:\poetry-demo&gt;poetry env use python</span><br><span class="line">Creating virtualenv poetry-demo-Ut74gzEx-py3.10 in C:\Users\xxp\AppData\Local\pypoetry\Cache\virtualenvs</span><br><span class="line">Using virtualenv: C:\Users\xxp\AppData\Local\pypoetry\Cache\virtualenvs\poetry-demo-Ut74gzEx-py3.10</span><br></pre></td></tr></table></figure>

<p><strong>重点说明</strong></p>
<ul>
<li><p>poetry env use python是使用当前命令行下激活的 python 解释器创建虚拟环境</p>
</li>
<li><p>也可以将指令最后的 <code>python</code> ，改为 <code>python3</code>、<code>python3.8</code>，之类的，甚至只要需要 <code>3.8</code>，只要确保对于的解释器能够在环境变量中找到。</p>
</li>
<li><p>更多的配置可以查看 <a href="https://python-poetry.org/docs/managing-environments/">官方文档</a></p>
</li>
<li><p>poetry 默认会将虚拟环境统一放在指定目录，例如刚刚创建的项目就放在 <code>C:\Users\xxp\AppData\Local\pypoetry\Cache\virtualenvs\</code> 目录当中</p>
</li>
<li><p>虚拟环境的命名模式为 <code>项目名-随机数-python版本</code></p>
</li>
</ul>
<h3 id="在当前项目下创建虚拟环境"><a href="#在当前项目下创建虚拟环境" class="headerlink" title="在当前项目下创建虚拟环境"></a>在当前项目下创建虚拟环境</h3><p>我们可以使用 <code>poetry config --list</code> 指令来查看 poetry 的几个主要设定，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X:\poetry-demo&gt;poetry config --list</span><br><span class="line">cache-dir = &quot;C:\\Users\\xxp\\AppData\\Local\\pypoetry\\Cache&quot;</span><br><span class="line">experimental.new-installer = true</span><br><span class="line">experimental.system-git-client = false</span><br><span class="line">installer.max-workers = null</span><br><span class="line">installer.modern-installation = true</span><br><span class="line">installer.no-binary = null</span><br><span class="line">installer.parallel = true</span><br><span class="line">virtualenvs.create = true</span><br><span class="line">virtualenvs.in-project = null</span><br><span class="line">virtualenvs.options.always-copy = false</span><br><span class="line">virtualenvs.options.no-pip = false</span><br><span class="line">virtualenvs.options.no-setuptools = false</span><br><span class="line">virtualenvs.options.system-site-packages = false</span><br><span class="line">virtualenvs.path = &quot;C:\\Users\\xxp\\AppData\\Local\\pypoetry\\Cache\\virtualenvs&quot;</span><br><span class="line">virtualenvs.prefer-active-python = false</span><br><span class="line">virtualenvs.prompt = &quot;&#123;project_name&#125;-py&#123;python_version&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>其中 <code>virtualenvs.create = true</code> 若改为 <code>false</code>，则可以停止 poetry 在检查不到虚拟环境是自动创建的行为模式，但是建议不要改动。</p>
<p>而 <code>virtualenvs.in-project = false</code> 就是我们要修改的目标，使用指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry config virtualenvs.in-project true</span><br></pre></td></tr></table></figure>

<p>先把之前创建的虚拟环境删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">X:\poetry-demo&gt;poetry env remove python</span><br><span class="line">Deleted virtualenv: C:\Users\xxp\AppData\Local\pypoetry\Cache\virtualenvs\poetry-demo-Ut74gzEx-py3.10</span><br></pre></td></tr></table></figure>

<p>重新创建虚拟环境，看一下差异：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">X:\poetry-demo&gt;poetry env use python</span><br><span class="line">Creating virtualenv poetry-demo in X:\poetry-demo\.venv</span><br><span class="line">Using virtualenv: X:\poetry-demo\.venv</span><br></pre></td></tr></table></figure>

<p>可以看出：</p>
<ul>
<li>虚拟环境的路径改为项目的根目录下了</li>
<li>名称固定位 <code>.venv</code></li>
</ul>
<h3 id="启动与退出虚拟环境"><a href="#启动与退出虚拟环境" class="headerlink" title="启动与退出虚拟环境"></a>启动与退出虚拟环境</h3><p>在项目的根目录下使用 <code>poetry shell</code> 就可以进入到虚拟环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X:\poetry-demo&gt;poetry shell</span><br><span class="line">Spawning shell within X:\poetry-demo\.venv</span><br><span class="line"></span><br><span class="line">(poetry-demo-py3.10) X:\poetry-demo&gt;</span><br></pre></td></tr></table></figure>

<p>poetry shell 指令会检查当前目录或上层目录是否存在 <code>pyproject，toml</code> 来确定需要启动的虚拟环境，所以如果不移动到项目的目录下，则会出现错误。</p>
<p>退出虚拟环境就更简单了，只要输入 <code>exit</code> 就可以了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(poetry-demo-py3.10) X:\poetry-demo&gt;exit</span><br><span class="line"></span><br><span class="line">X:\poetry-demo&gt;</span><br></pre></td></tr></table></figure>

<h1 id="poetry-指令"><a href="#poetry-指令" class="headerlink" title="poetry 指令"></a>poetry 指令</h1><p>poetry 是一个独立的命令行工具，他有自己的指令，需要花费额外的时间与精力学习，相较 pip 更加复杂，这个能是使用 poetry 的一道关卡。好在常用指令其实不超过 10 个，下面就来一一介绍。</p>
<h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry add</span><br></pre></td></tr></table></figure>

<p>相较于 <code>pip install</code>，我们试试安装 flask 看看会有什么样的变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(poetry-demo-py3.10) X:\poetry-demo&gt;poetry add flask</span><br><span class="line">Using version ^2.3.2 for flask</span><br><span class="line"></span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br><span class="line"></span><br><span class="line">Package operations: 8 installs, 0 updates, 0 removals</span><br><span class="line"></span><br><span class="line">  • Installing colorama (0.4.6)</span><br><span class="line">  • Installing markupsafe (2.1.3)</span><br><span class="line">  • Installing blinker (1.6.2)</span><br><span class="line">  • Installing click (8.1.6)</span><br><span class="line">  • Installing itsdangerous (2.1.2)</span><br><span class="line">  • Installing jinja2 (3.1.2)</span><br><span class="line">  • Installing werkzeug (2.3.6)</span><br></pre></td></tr></table></figure>

<p>可以看到 poetry 会将所有的信息全部列出来，并且清楚的告知了新增了那些第三方模块。</p>
<p>此时项目中的 <code>pyproject.toml</code> 也发生了变化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[tool.poetry.dependencies]</span><br><span class="line">python = &quot;^3.10&quot;</span><br><span class="line">flask = &quot;^2.3.2&quot;  # 新增部分</span><br></pre></td></tr></table></figure>

<p>这里要说明，安装 flask ，则 <code>pyproject.toml</code> 只会新增 <code>flask = &quot;^2.3.2&quot;</code> 这个字段的第三方模块，其余依赖不会出现在 <code>toml</code> 文件中。</p>
<h2 id="poetry-lock-与更新顺序"><a href="#poetry-lock-与更新顺序" class="headerlink" title="poetry.lock 与更新顺序"></a><code>poetry.lock</code> 与更新顺序</h2><p>除了更新 <code>pyproject.toml</code> ，此时项目中还会新增一个文件，名为 <code>poetry.lock</code> ，它实际上就相当于 <code>pip</code> 的 <code>requirements.txt</code> ，详细记录了所有安装的模块与版本。</p>
<p>当使用 <code>poetry add</code> 指令时，<code>poetry</code> 会自动依序帮你做完这三件事：</p>
<ol>
<li>更新 <code>pyproject.toml</code>。</li>
<li>依照 <code>pyproject.toml</code> 的内容，更新 <code>poetry.lock</code> 。</li>
<li>依照 <code>poetry.lock</code> 的内容，更新虚拟环境。</li>
</ol>
<p>由此可见， <code>poetry.lock</code> 的内容是取决于 <code>pyproject.toml</code> ，但两者并不会自己连动，一定要基于特定指令才会进行同步与更新， <code>poetry add</code> 就是一个典型案例。</p>
<p>此时项目目录结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry-demo</span><br><span class="line">├── poetry.lock</span><br><span class="line">└── pyproject.toml</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure>

<h2 id="poetry-lock-：更新-poetry-lock"><a href="#poetry-lock-：更新-poetry-lock" class="headerlink" title="poetry lock ：更新 poetry.lock"></a>poetry lock ：更新 poetry.lock</h2><p>当你自行修改了 <code>pyproject.toml</code> 内容，比如变更特定模块的版本（这是有可能的，尤其在手动处理版本冲突的时候），此时 <code>poetry.lock</code> 的内容与 <code>pyproject.toml</code> 出现了脱钩，必须让它依照新的 <code>pyproject.toml</code> 内容更新、同步，使用指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry lock</span><br></pre></td></tr></table></figure>

<p>如此一来，才能确保手动修改的内容，也更新到 <code>poetry.lock</code> 中，毕竟虚拟环境如果要重新建立，是基于 <code>poetry.lock</code> 的内容来安装模块，而非 <code>pyproject.toml</code> 。</p>
<p>还是那句话：</p>
<blockquote>
<p>poetry.lock 相当于 Poetry 的 requirements.txt 。</p>
</blockquote>
<p>但要特别注意的是， <code>poetry lock</code> 指令，仅会更新 <code>poetry.lock</code> ，不会同时安装模块至虚拟环境</p>
<p>因此，在执行完 <code>poetry lock</code> 指令后，必须再使用 <code>poetry install</code> 来安装模块。否则就会出现 <code>poetry.lock</code> 和虚拟环境不一致的状况。</p>
<p>更多 <code>poetry lock</code> 细节可参考 官方文件，其中特别值得注意的是 <code>--no-update</code> 参数。</p>
<h2 id="新增模块至-dev-dependencies"><a href="#新增模块至-dev-dependencies" class="headerlink" title="新增模块至 dev-dependencies"></a>新增模块至 dev-dependencies</h2><p>有些模块，比如 <code>pytest</code> 、 <code>black</code> 等等，只会在开发环境中使用，产品的部署环境并不需要。</p>
<p>Poetry 允许你区分这两者，将上述的模块安装至 <code>dev-dependencies</code> 区块，方便让你轻松建立一份「不包含」 <code>dev-dependencies</code> 开发模块的安装清单。</p>
<p>在此以 Black 为例，安装方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry add black --group dev</span><br></pre></td></tr></table></figure>

<p>结果的区别显示在 <code>pyproject.toml</code> 里：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[tool.poetry.dependencies]</span><br><span class="line">python = &quot;^3.10&quot;</span><br><span class="line">flask = &quot;^2.3.2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[tool.poetry.group.dev.dependencies]</span><br><span class="line">black = &quot;^23.7.0&quot;</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>black</code> 被列在不同区块： <code>tool.poetry.dev-dependencies</code> 。</p>
<p><strong>强烈建议善用 dev-dependencies</strong></p>
<p>善用 <code>--group dev</code> 参数，明确区分开发环境，我认为非常必要。</p>
<p>首先，这些模块常常属于「检测型」工具，相关的依赖模块着实不少！比如 <code>flake8</code> ，它依赖了 <code>pycodestyle</code> 、 <code>pyflakes</code> 、 <code>mccabe</code> 等等，还有 <code>black</code> 、 <code>pre-commit</code> ，依赖模块数量也都很可观。</p>
<h2 id="Poetry-更新模块"><a href="#Poetry-更新模块" class="headerlink" title="Poetry 更新模块"></a>Poetry 更新模块</h2><p>这个就很简单了，使用 <code>poetry update</code> 指令即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry update</span><br></pre></td></tr></table></figure>

<p>上面指令会更新全部可能可以更新的模块，也可以仅指定特定模块，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry update requests toml</span><br></pre></td></tr></table></figure>

<h2 id="列出全部模块清单"><a href="#列出全部模块清单" class="headerlink" title="列出全部模块清单"></a>列出全部模块清单</h2><p><strong>树状显示模块依赖层级</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry show --tree</span><br></pre></td></tr></table></figure>

<p>它也可以只显示指定模块的依赖层级，以 <code>celery</code> 为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry show celery --tree</span><br></pre></td></tr></table></figure>

<h2 id="Poetry-移除模块"><a href="#Poetry-移除模块" class="headerlink" title="Poetry 移除模块"></a>Poetry 移除模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry remove flask</span><br></pre></td></tr></table></figure>

<h2 id="输出-Poetry-虚拟环境的-requirements-txt"><a href="#输出-Poetry-虚拟环境的-requirements-txt" class="headerlink" title="输出 Poetry 虚拟环境的 requirements.txt"></a>输出 Poetry 虚拟环境的 requirements.txt</h2><p>理论上，全面改用 Poetry 后，项目中是不需要存在 <code>requirements.txt</code> ，因为它的角色已经完全被 <code>poetry.lock</code> 所取代。</p>
<p>但事实是，你可能还是需要它，甚至希望它随着 <code>poetry.lock</code> 的内容更新！至少对我而言就是如此，我在 Docker 部署环境中并不使用 Poetry，所以我需要一份完全等价于 <code>poetry.lock</code> 的 <code>requirements.txt</code> ，用于 Docker 部署。</p>
<p>你可能想说，那我就在 Poetry 的虚拟环境下，使用以往熟悉的指令 <code>pip freeze &gt; requirements.txt</code> 来产生一份就可以了吧？我本来也是这么想，但实际的产出却是如此：（提醒：目前 poetry-demo 专案中仅剩下 Black 和它的依赖模块）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">black @ file:///Users/kyo/Library/Caches/pypoetry/artifacts/11/4c/fc/cd6d885e9f5be135b161e365b11312cff5920d7574c8446833d7a9b1a3/black-22.3.0-cp38-cp38-macosx_10_9_x86_64.whl</span><br><span class="line">click @ file:///Users/kyo/Library/Caches/pypoetry/artifacts/f0/23/09/b13d61d1fa8b3cd7c26f67505638d55002e7105849de4c4432c28e1c0d/click-8.1.2-py3-none-any.whl</span><br><span class="line">mypy-extensions @ file:///Users/kyo/Library/Caches/pypoetry/artifacts/b6/a0/b0/a5dc9acd6fd12aba308634f21bb7cf0571448f20848797d7ecb327aa12/mypy_extensions-0.4.3-py2.py3-none-any.whl</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这呈现好像不是我们以前熟悉的那样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">black==22.3.0</span><br><span class="line">click==8.1.2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>没错，只要是使用 <code>poetry add</code> 安装的模块，在 <code>pip freeze</code> 就会变成这样。此时想输出类似 <code>requirements.txt</code> 的格式，需要使用 <code>poetry export</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry export -f requirements.txt -o requirements.txt --without-hashes --dev</span><br></pre></td></tr></table></figure>

<h1 id="Poetry-常用指令清单"><a href="#Poetry-常用指令清单" class="headerlink" title="Poetry 常用指令清单"></a>Poetry 常用指令清单</h1><ul>
<li><code>poetry add</code></li>
<li><code>poetry remove</code></li>
<li><code>poetry export</code></li>
<li><code>poetry env use</code></li>
<li><code>poetry shell</code></li>
<li><code>poetry show</code></li>
<li><code>poetry init</code></li>
<li><code>poetry install</code></li>
</ul>
<h2 id="修改-poetry-镜像源"><a href="#修改-poetry-镜像源" class="headerlink" title="修改 poetry 镜像源"></a>修改 poetry 镜像源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry source add tsinghua https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h1 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h1><p>参考：</p>
<ul>
<li><a href="https://realpython.com/dependency-management-python-poetry/">https://realpython.com/dependency-management-python-poetry/</a></li>
<li><a href="https://blog.kyomind.tw/python-poetry/">https://blog.kyomind.tw/python-poetry/</a></li>
<li><a href="https://notes.zhengxinonly.com/environment/use-poetry.html#poetry-lock-%E4%B8%8E%E6%9B%B4%E6%96%B0%E9%A1%BA%E5%BA%8F">https://notes.zhengxinonly.com/environment/use-poetry.html#poetry-lock-%E4%B8%8E%E6%9B%B4%E6%96%B0%E9%A1%BA%E5%BA%8F</a></li>
</ul>
]]></content>
      <categories>
        <category>python三方库学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>学习笔记</tag>
        <tag>poetry</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 为Next主题添加评论功能</title>
    <url>/2023/07/23/%E4%B8%BANext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="1-创建账号"><a href="#1-创建账号" class="headerlink" title="1 创建账号"></a>1 创建账号</h1><p>这个评论系统是基于 LeanCloud 进行的，先去注册一个账号，点这里进行注册。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://leancloud.cn/</span><br></pre></td></tr></table></figure>

<p>点这里创建应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://leancloud.cn/dashboard/applist.html#/newapp</span><br></pre></td></tr></table></figure>

<p>应用名看个人喜好。选择刚刚创建的应用，点击设置按钮，再点击应用Key按钮，你就能看到你的APP ID和APP KEY了：</p>
<p><img src="/2023/07/23/%E4%B8%BANext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/1.png" alt="1"></p>
<p>为了您的数据安全，请填写应用&gt;设置&gt;安全设置中的Web 安全域名，如下图：</p>
<p><img src="/2023/07/23/%E4%B8%BANext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/2.png" alt="2"></p>
<h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h2><p>修改你主题目录下的_config.yml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># 你的 App ID</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># 你的 App Key</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">有什么问题，欢迎留言指正与交流...</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">robohash</span> <span class="comment"># gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure>

<p>发布之后，我们看一下效果如何：</p>
<p><img src="/2023/07/23/%E4%B8%BANext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/3.png" alt="3"></p>
<h2 id="3-关闭"><a href="#3-关闭" class="headerlink" title="3 关闭"></a>3 关闭</h2><p>可以单独关闭某个页面的评论，在页面的 Front-matter 中添加 comments 字段，设为 false。比如标签页不想要评论，则在标签页面中做如下设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: xxxxxxxxx</span><br><span class="line">date: 2022-03-06 17:05:24</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<h2 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4 参考文章"></a>4 参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1481858">https://cloud.tencent.com/developer/article/1481858</a></p>
]]></content>
      <categories>
        <category>网站搭建-hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github、hexo搭建自己的博客</title>
    <url>/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="使用github、hexo搭建自己的博客"><a href="#使用github、hexo搭建自己的博客" class="headerlink" title="使用github、hexo搭建自己的博客"></a>使用github、hexo搭建自己的博客</h1><h1 id="使用github、hexo搭建自己的个人博客"><a href="#使用github、hexo搭建自己的个人博客" class="headerlink" title="使用github、hexo搭建自己的个人博客"></a>使用github、hexo搭建自己的个人博客</h1><h2 id="01、环境准备"><a href="#01、环境准备" class="headerlink" title="01、环境准备"></a>01、环境准备</h2><p>在搭建Github博客之前，先准备一下环境（安装下方的顺序来安装，别弄混了）</p>
<blockquote>
<p>1.安装git<br>官方地址：<a href="https://git-scm.com/" title="https://git-scm.com/">https://git-scm.com/</a></p>
</blockquote>
<p>1、访问git官方地址，下载对应的安装包，进行安装（简单的点击下一步）。</p>
<p>2、安装好之后，鼠标右键可以看到：Git Bash Here，点击后打开了。</p>
<p>3、输入：git –version</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_tKKj9TtTX-.png" alt="image_tKKj9TtTX-"></p>
<p>出现这个说明git安装成功。</p>
<blockquote>
<p>2.安装node.js<br>官方地址：<a href="https://nodejs.org/en/download/" title="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
</blockquote>
<p>1、访问nodejs官方地址，下载对应的安装包，进行安装（简单的点击下一步）。</p>
<p>2、安装好之后，配置环境变量，并在终端里面输入：node -v</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_LPGHvgMuxP.png" alt="image_LPGHvgMuxP"></p>
<p>出现这个说明nodejs安装成功~</p>
<blockquote>
<p>3.安装Hexo<br>安装命令：<code>npm install hexo -g</code></p>
</blockquote>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_EK-EXoh965.png" alt="image_EK-EXoh965"></p>
<p>测试是否安装成功，命令：hexo -v</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_f-ol8XUcYt.png" alt="image_f-ol8XUcYt"></p>
<blockquote>
<p>4.安装hexo依赖<br>命令：<code>npm install --save hexo-deployer-git</code></p>
</blockquote>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_Rjr7y0lHsn.png" alt="image_Rjr7y0lHsn"></p>
<h2 id="02、git配置SSH-key"><a href="#02、git配置SSH-key" class="headerlink" title="02、git配置SSH key"></a>02、git配置SSH key</h2><p>相信看到本文的你应该听过github，并且也注册了自己的github账号，如果现在还没有的可以去github注册一个账号。</p>
<blockquote>
<p>为什么要配置SSH key？<br>目的：可以免密的将本地的源码和资源上传到github，无需要每次都输账号和密码。</p>
</blockquote>
<p>先看本地是否配置好SSH key（命令：cd ~&#x2F;.ssh）</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_0h98Vlfs0W.png" alt="image_0h98Vlfs0W"></p>
<blockquote>
<p>备注：<br>因为ssh配置好之后是保存到 c:&#x2F;用户&#x2F;Administrator&#x2F;.ssh</p>
</blockquote>
<h3 id="1-配置ssh"><a href="#1-配置ssh" class="headerlink" title="1.配置ssh"></a>1.配置ssh</h3><blockquote>
<p>先生成ssh key<br>ssh-keygen -t rsa -C “邮件地址”<br>备注：这里的邮件地址是github账号绑定的邮件地址</p>
</blockquote>
<p>输入生成命令：ssh-keygen -t rsa -C “邮件地址”后。连续回车三次即可</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_3QwHj17T50.png" alt="image_3QwHj17T50"></p>
<p>可以看到在用户文件夹下生成了一个ssh文件夹</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_ugdIEIqI00.png" alt="image_ugdIEIqI00"></p>
<p>进入到ssh文件夹，复制id_rsa.pub文件里全部内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC+Tl7eRzTjWTOjAbIrFs8DeD3XKR+zBKCbyb5epRWiTKWoSlj3tAWdshEkAF9apajDEV1JG9krDg3/Ep9KCA+CuznhMLPlbJZbpvsm2iUOtqXkXXXXXXXXXXXXxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXXXXXXAAAAB3NzaC1yc2EAA</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接着打开github主页，点击个人设置，点击左侧的SSH and GPG keys，点击New SSH key</p>
<p>将id_rsa.pub复制的内容粘贴到key中，title随便起一个就行。</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_vD-eyX6_9M.png" alt="image_vD-eyX6_9M"></p>
<p>点击 Add SSH key</p>
<blockquote>
<p>测试是否成功：<br>ssh -T <a href="mailto:git@github.com" title="git@github.com">git@github.com</a></p>
</blockquote>
<p>输入测试命令后，接着输入yes，出现下面这个提示说明成功</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_eRJr6qxCdf.png" alt="image_eRJr6qxCdf"></p>
<p>配置账号和密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ git config --<span class="keyword">global</span> user.name <span class="string">&quot;你的github用户名&quot;</span> <span class="comment">#你的github用户名</span></span><br><span class="line">$ git config --<span class="keyword">global</span> user.email <span class="string">&quot;填写你的github注册邮箱&quot;</span> <span class="comment">#填写你的github注册邮箱</span></span><br></pre></td></tr></table></figure>

<p>备注：用户名和邮箱记得改为 自己的</p>
<h2 id="03-搭建个人博客"><a href="#03-搭建个人博客" class="headerlink" title="03 搭建个人博客"></a>03 搭建个人博客</h2><h3 id="1-新建博客"><a href="#1-新建博客" class="headerlink" title="1.新建博客"></a>1.新建博客</h3><p>开始之前先介绍一下heox的基本命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;tags&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对应的缩写，比如：<br>hexo n &#x3D;&#x3D; hexo new<br>hexo g &#x3D;&#x3D; hexo generate</p>
</blockquote>
<p>新建一个保存博客的存放目录，比如我的是：E:\Zhu’s blog</p>
<blockquote>
<p>进入到本地博客存放目录<br>初始化 个人博客<br>命令：hexo init</p>
</blockquote>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_CkXo5S5XJJ.png" alt="image_CkXo5S5XJJ"></p>
<p>可以看到博客存放目录出现了如下内容：</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_7pDRjYfdsS.png" alt="image_7pDRjYfdsS"></p>
<h3 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h3><blockquote>
<p>命令：hexo g</p>
</blockquote>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_HMvDLxhYfa.png" alt="image_HMvDLxhYfa"></p>
<h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><blockquote>
<p>命令：hexo s</p>
</blockquote>
<p>报错解决：</p>
<h3 id="问题：hexo-g-报错-line-mathALL-is-not-funciton问题解决"><a href="#问题：hexo-g-报错-line-mathALL-is-not-funciton问题解决" class="headerlink" title="问题：hexo g 报错,line.mathALL is not funciton问题解决"></a>问题：hexo g 报错,line.mathALL is not funciton问题解决</h3><blockquote>
<p>原因：nodejs版本低于12</p>
</blockquote>
<blockquote>
<p>解决：两种方法</p>
</blockquote>
<blockquote>
<p>方法1）请将nodejs升级到高于12.0.0的版本</p>
</blockquote>
<blockquote>
<p>方法2）config.xml中的 highlight-&gt;enable的值从true更改为false，这样可以避免异常。</p>
</blockquote>
<p>在浏览器这访问：</p>
<p><a href="http://localhost:4000/">http://localhost:4000/</a></p>
<p>可以看到访问没问题。</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_gHPwTIA1tJ.png" alt="image_gHPwTIA1tJ"></p>
<p>但这个只是在本地预览，接着将这个博客部署到github。</p>
<h3 id="2-部署到github"><a href="#2-部署到github" class="headerlink" title="2.部署到github"></a>2.部署到github</h3><p>新建一个github仓库</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_zZzw0LSfvJ.png" alt="image_zZzw0LSfvJ"></p>
<p>给仓库起个名称，注意！注意！注意！</p>
<blockquote>
<p>仓库名称格式： 用户名.github.io</p>
</blockquote>
<p>我的仓库名称为：sssss.github.io</p>
<p>因为这个仓库名称将作为你github博客的访问地址</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_GA6x5_B_v5.png" alt="image_GA6x5_B_v5"></p>
<p>编辑_config.yml，_ config.yml在博客存放目录下</p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_dK-DJp_v3W.png" alt="image_dK-DJp_v3W"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:Zss1125/ssss.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>repository仓库地址改为自己的</p>
<p>branch看自己的github仓库是master还是main，我这里是main，所以就填写main</p>
<blockquote>
<p>发布到github<br>命令：hexo d</p>
</blockquote>
<blockquote>
<p>出现问题：hexo d命令报错 ERROR Deployer not found: git<br>问题描述<br>我已经在站点配置文件中写入了：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:ZhuCX1125/ZhuCX1125.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是执行，hexo d报错：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解决方案<br>这是因为没安装hexo-deployer-git插件，在站点目录下输入下面的插件安装就好了：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后在使用Hexo d命令就可以推送了。</p>
</blockquote>
<p>在浏览器访问</p>
<p><a href="https://zhucx1125.github.io/">https://zhucx1125.github.io/</a></p>
<p><img src="/2023/07/23/%E4%BD%BF%E7%94%A8github%E3%80%81hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image_hqvv-JRSpI.png" alt="image_hqvv-JRSpI"></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></p>
<p><a href="https://www.cnblogs.com/chenlove/p/15058170.html%3E">https://www.cnblogs.com/chenlove/p/15058170.html&gt;</a></p>
]]></content>
      <categories>
        <category>网站搭建-hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo博客中插入图片</title>
    <url>/2023/07/22/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h3 id="绝对路径本地引用"><a href="#绝对路径本地引用" class="headerlink" title="绝对路径本地引用"></a>绝对路径本地引用</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source&#x2F;images文件夹中，通过markdown语法访问它们。</p>
<p><img src="/2023/07/22/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/1.png" alt="1"></p>
<h3 id="相对路径本地引用"><a href="#相对路径本地引用" class="headerlink" title="相对路径本地引用"></a>相对路径本地引用</h3><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过站点配置文件_config.yml来生成。</p>
<p>将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source&#x2F;_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。</p>
<p><img src="/2023/07/22/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/2.png" alt="2"></p>
<h3 id="标签插件语法引用"><a href="#标签插件语法引用" class="headerlink" title="标签插件语法引用"></a>标签插件语法引用</h3><p>这种相对路径的图片显示方法在博文详情页面显示没有问题，但是在首页预览页面图片将显示不出来。如果希望<strong>图片在文章和首页中同时显示</strong>，可以使用标签插件语法。</p>
<p><img src="/2023/07/22/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/3.png" alt="3"></p>
<h3 id="HTML语法引用"><a href="#HTML语法引用" class="headerlink" title="HTML语法引用"></a>HTML语法引用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;SpellCheck.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">title</span>=<span class="string">&quot;拼写检查工具Grammarly.&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;拼写检查工具Grammarly.&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="启用fancybox：点击查看图片大图"><a href="#启用fancybox：点击查看图片大图" class="headerlink" title="启用fancybox：点击查看图片大图"></a>启用fancybox：点击查看图片大图</h3><p>我这里使用的是Hexo的NexT主题，NexT主题中提供了fancybox的方便接口。</p>
<p>Usage：<a href="https://github.com/theme-next/theme-next-fancybox3">https://github.com/theme-next/theme-next-fancybox3</a><br>markdown用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% img http://www.viemu.com/vi-vim-cheat-sheet.gif 600 600 &quot;点击查看大图:vi/vim-cheat-sheet&quot; %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Hexo部分图片禁用fancybox</strong></p>
<p>hexo在使用fancybox插件时，图片的效果还是很可观的，但是我们往往是不需要所有的图片都用fancybox；<br>例如：hexo next主题下，添加某些图片的时候，有些事不需要可点击的<br>修改<code>theme\next\source\js\src\utils.js</code> 红色字体部分；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff --git a/source/js/src/utils.js b/source/js/src/utils.js</span><br><span class="line">index 0f3704e..8516665 100644</span><br><span class="line">--- a/source/js/src/utils.js</span><br><span class="line">+++ b/source/js/src/utils.js</span><br><span class="line">@@ -11,6 +11,7 @@ NexT.utils = NexT.$u = &#123;</span><br><span class="line">       .not(&#x27;.group-picture img, .post-gallery img&#x27;)</span><br><span class="line">       .each(function() &#123;</span><br><span class="line">         var $image = $(this);</span><br><span class="line">+        if ($(this).hasClass(&#x27;nofancybox&#x27;)) return;</span><br><span class="line">         var imageTitle = $image.attr(&#x27;title&#x27;);</span><br><span class="line">         var $imageWrapLink = $image.parent(&#x27;a&#x27;);</span><br></pre></td></tr></table></figure>

<p>在img标签使用的时候加上class&#x3D;”nofancybox”即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.viemu.com/vi-vim-cheat-sheet.gif&quot; class=&quot;nofancybox&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="另外比较好用的方法"><a href="#另外比较好用的方法" class="headerlink" title="另外比较好用的方法"></a>另外比较好用的方法</h2><h3 id="根目录下的-config-yml-的配置文件"><a href="#根目录下的-config-yml-的配置文件" class="headerlink" title="根目录下的 _config.yml 的配置文件"></a>根目录下的 _config.yml 的配置文件</h3><p>搜索，修改内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder:true</span><br></pre></td></tr></table></figure>

<p>然后可以将typora的路径改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./$&#123;filename&#125;</span><br></pre></td></tr></table></figure>

<p>如下图</p>
<p><img src="/2023/07/22/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/image-20231112182727223.png" alt="image-20231112182727223"></p>
]]></content>
      <categories>
        <category>网站搭建-hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>日常使用hexo写文章流程梳理</title>
    <url>/2023/11/12/%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h1 id="日常使用hexo写文章流程梳理"><a href="#日常使用hexo写文章流程梳理" class="headerlink" title="日常使用hexo写文章流程梳理"></a>日常使用hexo写文章流程梳理</h1><p><strong>1. 首先创建文章</strong></p>
<p>使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 博客目录</span><br><span class="line">hexo n [文章名称]</span><br></pre></td></tr></table></figure>

<p><strong>2. 使用typore打开生产的文章.md文件开始编写文章</strong></p>
<p>这里主要使用.md的语法，当需要插入图片的时候，需要把typore设置成如下图的地方。</p>
<p><img src="/2023/11/12/%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/image-20231112180625831.png" alt="image-20231112180625831"></p>
<p>设置之后需要修改语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 复制之前</span><br><span class="line">![image-20231112180625831](%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/image-20231112180625831.png)</span><br><span class="line">复制之后</span><br><span class="line">&#123;% asset_img image-20231112180625831.png %&#125;</span><br></pre></td></tr></table></figure>

<p>因此当需要插入图片的时候比较麻烦，我一般都不使用图片。</p>
<p><strong>3. 写完文章之后使用如下页面生成静态页面然后上传git</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 我们可以写成一条命令</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p><strong>4. 登录部署网站，更新内容</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://vercel.com/</span><br></pre></td></tr></table></figure>

<p>登录之后如下内容</p>
<p><img src="/2023/11/12/%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/image-20231112190856269.png" alt="image-20231112190856269"></p>
<p>进入项目，然后点击部署，可以看到刚刚上传的最新页面，</p>
<p><img src="/2023/11/12/%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/image-20231112191008812.png" alt="image-20231112191008812"></p>
<p>然后点进去，推进到生产。</p>
<p><img src="/2023/11/12/%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/image-20231112191220182.png" alt="image-20231112191220182"></p>
<p>可以看到最新页面已经到域名地址了</p>
<p><img src="/2023/11/12/%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/image-20231112191346558.png" alt="image-20231112191346558"></p>
]]></content>
      <categories>
        <category>网站搭建-hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>hexo</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>解决next5主题目录无法跳转的问题</title>
    <url>/2023/11/12/%E8%A7%A3%E5%86%B3next5%E4%B8%BB%E9%A2%98%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p>这个问题的特征是渲染没问题，也就是不会有上面那种情况，但是点击目录链接会在控制台报错：<code>Cannot read property &#39;top&#39; of undefined</code>。</p>
<p>我们打开控制台，查看目录的的超链接标签，会看到 href 是一串乱码：</p>
<p><img src="/2023/11/12/%E8%A7%A3%E5%86%B3next5%E4%B8%BB%E9%A2%98%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98/image-20231112231023258.png" alt="image-20231112231023258"></p>
<p>我们去找他对应的标题：</p>
<p><img src="/2023/11/12/%E8%A7%A3%E5%86%B3next5%E4%B8%BB%E9%A2%98%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98/image-20231112231116565.png" alt="image-20231112231116565"></p>
<p>实际上直接点击这个超链接是可以跳转的，但是点目录却不行。这是因为标题 id 是中文，但是目录的连接是中文乱码，代码里头的 JQuery 选择器拿着乱码是没法找到对应 id 的标题的。</p>
<h1 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h1><p>这个错误很明显，因为控制台已经告诉我错误代码在 <code>post-details.js</code>里了，顺着提示找到 <code>themes\next\source\js\src\post-details.js</code>，找到第 73 行为目录绑定点击事件的方法，会看到</p>
<p><img src="/2023/11/12/%E8%A7%A3%E5%86%B3next5%E4%B8%BB%E9%A2%98%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98/image-20201217170155109.png" alt="image-20201217170155109"></p>
<p><code>targetSelector</code>就是对应标题的 id，我们在他被塞到选择器之前重新编码一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对获取到的url进行重编码</span><br><span class="line">targetSelector = decodeURI(this.getAttribute(&#x27;href&#x27;))</span><br></pre></td></tr></table></figure>

<p>然后 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 重新跑一下，发现目录就正常了。</p>
<p>另外，在next6 里这个问题被修复了：<a href="https://github.com/theme-next/hexo-theme-next/issues/1547">点击文章中文目录跳转无法实现 #1547</a>。</p>
<h1 id="参考大佬文章"><a href="#参考大佬文章" class="headerlink" title="参考大佬文章"></a>参考大佬文章</h1><ul>
<li><a href="https://www.cnblogs.com/Createsequence/p/14150758.html">https://www.cnblogs.com/Createsequence/p/14150758.html</a></li>
</ul>
]]></content>
      <categories>
        <category>网站搭建-hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>错误记录</tag>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
